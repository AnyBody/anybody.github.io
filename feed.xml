<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://anyscript.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://anyscript.org/" rel="alternate" type="text/html" /><updated>2018-10-04T09:28:54+02:00</updated><id>https://anyscript.org/feed.xml</id><title type="html">AnyScript Community</title><subtitle>A community for the users of AnyBody Modeling System and the AnyScript language.</subtitle><author><name>AnyBody Technology</name><email>sales@anybodytech.com</email></author><entry><title type="html">Getting the maximum strength of your model!</title><link href="https://anyscript.org/tools/estimating-maximum-model-strength/" rel="alternate" type="text/html" title="Getting the maximum strength of your model!" /><published>2018-09-14T00:00:00+02:00</published><updated>2018-09-14T00:00:00+02:00</updated><id>https://anyscript.org/tools/estimating-maximum-model-strength</id><content type="html" xml:base="https://anyscript.org/tools/estimating-maximum-model-strength/">&lt;p&gt;When working with subject specific scaling of models, it can be a
valuable tool to know what the strength of your model is for a given
posture. With strength we mean the maximum permissible load that the model can carry in a given posture.
This post will show you a way of calculating the maximum
strength of a simple 2D arm model in various postures. The concepts
presented can of course be extended to models involving the full body
model or parts of it.&lt;/p&gt;

&lt;figure class=&quot;align-right&quot; style=&quot;width: 300px&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/max-strength_simple-arm.png&quot; alt=&quot;Model of a simple arm&quot; /&gt;
  &lt;figcaption&gt;Fig. 1: The simple 2D arm model used in this example&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For us to do so, we first need to setup an example model. The
model is a 2D arm model comprised of an upper and lower arm segment,
attached with 8 simple muscles (fig. 1). The model is constraint to only
allow movement in the global x and y direction. This allows us to impose
movements which resembles flexion and extension of the shoulder and
elbow joint. Further, we want to show a general way of calculating the
strength independent of the movement, we therefore set up four load
scenarios to mimic a flexion, extension, push, and pull movement.
Since we want to investigate &lt;em&gt;maximum strength&lt;/em&gt;, we need to be sure 
that the muscles are recruited appropriately. This is
done by switching to the &lt;code&gt;MinMax_Strict&lt;/code&gt; muscle recruiter in the study section of our model. 
For more information on muscle recruitment in the Anybody Modelling software, se &lt;a href=&quot;https://anyscript.org/tutorials/MuscleRecruitment/index.html&quot;&gt;this tutorial.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step in finding the default maximum strength for a posture, is to know the
relationship between load and &lt;code&gt;MaxMuscleActivity&lt;/code&gt; ($mmact$). We can do this by
implementing a parameter study to investigate the $mmact$ across a spectrum of
loads. This is done using the &lt;code&gt;AnyParamStudy&lt;/code&gt; class as seen below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;AnyParamStudy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StrengthEval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Analysis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArmStudy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InverseDynamics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;nStep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;AnyDesVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArmModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dumbbell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;AnyDesMeasure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArmStudy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This study runs our model through the loads defined in the $load$ variable. So, in this
example it does 100 steps where it starts at 0 N and stops at 250 N. This
enables us to plot the $mmact$ as a function of the load. By running the parameter
study for all four load scenarios we end up with a graph as seen in fig. 2.&lt;/p&gt;

&lt;figure style=&quot;width: 80%&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/Concentric_paramStudy.png&quot; alt=&quot;Max activity as function of load&quot; /&gt;
  &lt;figcaption&gt;Fig. 2: Max muscle activity as a function of the applied load. Dashed line indicate $mmact = 1$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can see that for very low loads there might be other factors than the applied load
affecting the relationship. If we dwell by this fact and wonder why this
could be, we could infer that the influence of gravity and segment mass
could interfere with the relationship between $load$ and $mmact$. This means
that when applying low external loads, the important factor in $mmact$ is
the mass of the moved segments, and the gravity imposed on those
segments. The graph also tells us that for high loads there is a linear
relationship between load and $mmact$, and the linear part is crossing
$mmact = 1$ for all scenarios. We can use this information to
calculate the maximum strength of the model. If we look at the equation
for a linear function it looks like this:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:1}  y = ax + \ b \end{equation}&lt;/script&gt;

&lt;p&gt;Where in this case $y$ is the mmact, $x$ is the load, $a$ is the slope of the
function, and $b$ is the intercept with the y-axis. The slope of the
linear part can be calculated using only two points and applying the
equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:2} a = \frac{(y_{2} - y_{1})}{(x_{2} - x_{1})} \end{equation}&lt;/script&gt;

&lt;p&gt;Now that we know the coordinates of two points and the slope, we can
start figuring out what the load is at $mmact = 1$. For this
we again look at equation $\ref{eq:2}$, only this time we know the slope, the point
$( x_{2},y_{2})$, and the $y_{1}$ coordinate,
which should be equal to 1. We are therefore interested in finding
$x_{1}$. We rearrange equation $\ref{eq:2}$, into:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:3} x_{1} = \frac{1}{a} - \frac{y_{1}}{a} + x_{2} \end{equation}&lt;/script&gt;

&lt;p&gt;This allows us to evaluate what the maximum load $x_{1}$ is, that
the model can support for a given posture. To check our results, we can
calculate the maximum strength for our four scenarios using equation $\ref{eq:3}$ and try to implement
the output load in our models. Table 1. shows the calculated strengths of the models, and the $mmact$
when applying these loads.&lt;/p&gt;

&lt;p&gt;| Movement  | Strength (N)         | New MMACT |
|———–|———————-|———–|
| Extension | 77.08                | 1.04      |
| Flexion   | 58.93                | 0.99      |
| Push      | 83.09                | 1.00      |
| Pull      | 183.80               | 1.00      |
Table 1: Calculated strength and $mmact$ after applying the calculated load {:.notice}&lt;/p&gt;

&lt;p&gt;Now we can calculate the maximum load for any given posture!&lt;/p&gt;

&lt;h3 id=&quot;find-the-code-on-github&quot;&gt;Find the code on GitHub&lt;/h3&gt;

&lt;p&gt;The AnyScript example which shows the concept of finding the maximum
strength is available &lt;a href=&quot;https://github.com/AnyBody/max-muscle-strength&quot;&gt;on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>Bjørn Keller Jensen</name><email>bkje14@student.aau.dk</email></author><category term="strength" /><category term="muscle" /><summary type="html">In this post you will see how to find the maximum strength of your model.</summary></entry><entry><title type="html">Body Model Configuration App</title><link href="https://anyscript.org/tools/body-model-configurator/" rel="alternate" type="text/html" title="Body Model Configuration App" /><published>2018-06-20T00:00:00+02:00</published><updated>2018-06-20T00:00:00+02:00</updated><id>https://anyscript.org/tools/body-model-configurator</id><content type="html" xml:base="https://anyscript.org/tools/body-model-configurator/">&lt;p&gt;One of the first things I did when starting to use the AnyBody Modeling
System, was to understand how to configure the human model. This means enabling and disabling different body parts and setting up the available options for muscles, ligaments
etc. The model is configured via AnyScript by defining switches
which we call Body Model (BM) statements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_ARM_RIGHT&lt;/span&gt; &lt;span class=&quot;x x-Options&quot;&gt;ON&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wouldn’t it be nice to configure the model by having some buttons and
instantaneous visual feedback as well? That is what I thought! Therefore, I have
developed a software which provides a graphical user interface (GUI) for configuring the
Body Model, called BM-Plugin. By using it, you will be able to configure your human model in a more friendly manner but without trying to give up the
flexibility of AnyScript.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_bmdemo.gif&quot; alt=&quot;BM_Plugin_Demo&quot; /&gt;

  &lt;figcaption&gt;BM Plugin: gives you the ability to visually configure the Body Model.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;BM-Plugin has in target both beginner and advanced AMS users. If you have little to no experience using
AnyScript, the BM Plugin will help you a lot in getting started with it and to understand how switches and BM statements work. 
If you are an advanced AMS user, you will find configuring your human model much easier and much faster by using the plugin. And don’t worry
about loosing your freedom with AnyScript! BM Plugin is not meant to replace it, it is meant to write it for you, so it saves you time.&lt;/p&gt;

&lt;p&gt;In the remainder of this post I will show you what the plugin is able of doing and some technicalities.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-and-use-bm-plugin&quot;&gt;How to get and use BM-Plugin&lt;/h2&gt;

&lt;p&gt;BM-Plugin comes integrated with AMMR v2.2(???) and it is available to use in AMS starting with version v7.2(???). All you have to do is to make sure that
you have these versions or later available on your computer. You can find more information about how to get the latest AMMR 
&lt;a href=&quot;https://anyscript.org/getting-started/&quot;&gt;here&lt;/a&gt;. Once you have everything ready,
load your model containing the &lt;code&gt;HumanModel&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;ANYBODY_PATH_BODY&amp;gt;/HumanModel.any&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and if everything is fine, you should be able to start the BM-Plugin by clicking the button marked in the figure below:&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_image1.png&quot; alt=&quot;BM_Plugin_1&quot; /&gt;

  &lt;figcaption&gt;Load your model and start the plugin by only clicking a button.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;using-bm-plugin&quot;&gt;Using BM-Plugin&lt;/h2&gt;

&lt;p&gt;The BM-Plugin is structured in a number of tabs, each of them giving you options
to adjust the configuration of different body parts while providing visual
feedback if available. These tabs are: &lt;code&gt;Body&lt;/code&gt;, &lt;code&gt;Legs&lt;/code&gt;, &lt;code&gt;Arms&lt;/code&gt;, &lt;code&gt;Trunk&lt;/code&gt; and
&lt;code&gt;Mannequin Drivers&lt;/code&gt;. Once the desired configuration is set, you can load it in
AMS by clicking &lt;code&gt;Apply&lt;/code&gt; or &lt;code&gt;OK&lt;/code&gt;. The difference is that by clicking &lt;code&gt;Apply&lt;/code&gt;
the Plugin will stay open for you to configure the model further. When &lt;code&gt;OK&lt;/code&gt; is clicked, the configuration is saved in a history file which is available in the &lt;code&gt;Apply History&lt;/code&gt; drop menu, next to the &lt;code&gt;Apply&lt;/code&gt; button. It is therefore possible to load a previous configurations of the model.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_tabs.gif&quot; alt=&quot;BM_Plugin_Tabs&quot; /&gt;

  &lt;figcaption&gt;The 'Body', 'Legs', 'Arms', 'Trunk' and 'Mannequin Drivers' tabs.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Of course, not all BM statements have a visual representation in the AMS Model View or are directly related to physical body parts. Therefore, the BM statements which were not classified in the tabs mentioned before can be found and modified in the &lt;code&gt;Advanced&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;By having the presented overview of the Plugin, you should be ready to use it now. However, if you are interested in finding some details about how it works behind scenes the too, continue reading.&lt;/p&gt;

&lt;h2 id=&quot;how-bm-plugin-works&quot;&gt;How BM-Plugin works&lt;/h2&gt;

&lt;p&gt;As stated in the introduction, the BM-Plugin is dependent on the &lt;code&gt;HumanModel&lt;/code&gt;. Therefore, every time you start the plugin, it will check your &lt;code&gt;.main.any&lt;/code&gt; file to determine if it is included. If it is, the Plugin will create a new file named &lt;code&gt;BodyModelConfiguration.any&lt;/code&gt; inside the &lt;code&gt;Model&lt;/code&gt; folder next to your &lt;code&gt;.main.any&lt;/code&gt; file. The plugin will then ask you if you allow it to include this file inside the main file (I recommend that you do):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Model/BodyModelConfiguration.any&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The plugin will store and modify all the needed BM statements for your model inside the &lt;code&gt;BodyModelConfiguration.any&lt;/code&gt; file. I encourage you to use this file to store the BM statements regardless if you use the plugin frequently or not. You will also find that most of the examples using the &lt;code&gt;HumanModel&lt;/code&gt; have this structure implemented and they are ready to be configured using the BM-Plugin.&lt;/p&gt;

&lt;p&gt;The Configuration file can be seen inside the plugin under the &lt;code&gt;Script File&lt;/code&gt; tab:&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_script.png&quot; alt=&quot;BM_Plugin_Script&quot; /&gt;

  &lt;figcaption&gt;The `Script File` tab.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now I think you know enough about the plugin to try it yourself, so what are you waiting for?&lt;/p&gt;

&lt;p&gt;Any development suggestions and feedback are more than welcomed!&lt;/p&gt;</content><author><name>Ioan-Matei Sarivan</name></author><category term="Model configuration" /><category term="BM switches" /><summary type="html">This introduces a python application to help configure your model.</summary></entry><entry><title type="html">AMMR now has a DOI</title><link href="https://anyscript.org/news/DOI/" rel="alternate" type="text/html" title="AMMR now has a DOI" /><published>2018-06-15T00:00:00+02:00</published><updated>2018-06-15T00:00:00+02:00</updated><id>https://anyscript.org/news/DOI</id><content type="html" xml:base="https://anyscript.org/news/DOI/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_object_identifier&quot;&gt;Digital Object Identifiers&lt;/a&gt; (DOIs) are
the foundation of references and metrics in the world of academia. With the release
of AMMR 2.1.1 we have also added a DOI to the AnyBody Managed Model Repository (AMMR):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://doi.org/10.5281/zenodo.1250764&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.1250764.svg&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The DOI for the AMMR are issues by &lt;a href=&quot;http://about.zenodo.org/&quot;&gt;Zenodo&lt;/a&gt;, which is
an European Open Science platform hosted at &lt;a href=&quot;https://home.cern/&quot;&gt;CERN&lt;/a&gt;. If you click the link above you will be directed to the side shown below.&lt;/p&gt;

&lt;figure&gt;
  
&lt;a href=&quot;https://zenodo.org/record/1287730&quot;&gt;&lt;img src=&quot;/assets/images/posts/doi_ammr_zendo.png&quot; alt=&quot;AMMR on Zenodo&quot; /&gt;&lt;/a&gt;

  &lt;figcaption&gt;
The AMMR record on Zenodo
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;archived-versions&quot;&gt;Archived versions&lt;/h3&gt;

&lt;p&gt;The DOI above always links to the newest version of the AMMR. That is called a
 concept DOI, and is useful if you want to cite all version of the AMMR.
 However, the AMMR is updated regularly, and we would often like to cite a
 specific version of the AMMR. Luckily, Zenodo &lt;a href=&quot;http://blog.zenodo.org/2017/05/30/doi-versioning-launched/&quot;&gt;supports DOI versioning&lt;/a&gt;, and
 every version of the AMMR has their own DOI.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;th&gt;DOI&lt;/th&gt;
      &lt;th&gt;ReleaseData&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;All versions&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.125076&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-2.1.1&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.1287730&lt;/td&gt;
      &lt;td&gt;June 12, 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-2.1.0&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.125127&lt;/td&gt;
      &lt;td&gt;March 25, 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-2.0.0&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.1251274&lt;/td&gt;
      &lt;td&gt;November 30, 2017&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-1.6.6&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.1250765&lt;/td&gt;
      &lt;td&gt;March 13, 2017&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;See also:&lt;/strong&gt; The complete &lt;a href=&quot;https://zenodo.org/search?page=1&amp;amp;size=20&amp;amp;q=conceptrecid:%221250764%22&amp;amp;sort=-publication_date&amp;amp;all_versions=True&quot;&gt;list of releases on Zenodo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once a DOI is created &lt;a href=&quot;http://about.zenodo.org/&quot;&gt;Zenodo&lt;/a&gt; also
archives all the associated files to ensure data is never changed or lost. This effectively means that you can now also
download all &lt;a href=&quot;https://zenodo.org/record/1287730&quot;&gt;archived versions of the AMMR&lt;/a&gt;
directly from Zenodo.&lt;/p&gt;

&lt;h3 id=&quot;citing-the-ammr&quot;&gt;Citing the AMMR&lt;/h3&gt;

&lt;p&gt;DOI’s will also help you cite the AMMR and specify exactly which version the AMMR you use. This is really important for scientific publications so other can reproduce your results. The DOI ensures that others can be confident that they get the exact version of the AMMR that you
used. Once a DOI is minted the underlying files can’t be changed. So DOIs are
also essential for traceability.&lt;/p&gt;

&lt;p&gt;Zenodo will even generate the correct citation style for all journals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/doi_cite.png&quot; alt=&quot;Different citation styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of how to cite the AMMR v.2.1.1 for Journal of Biomechanics:&lt;/p&gt;

&lt;div class=&quot;notice--success&quot;&gt;
  &lt;h4&gt;How to cite:&lt;/h4&gt;
  
&lt;p&gt;Morten Enemark Lund, Søren Tørholm, &amp;amp; Moonki Jung. (2018, June 12). The AnyBody Managed Model Repository (AMMR) (Version 2.1.1). Zenodo. http://doi.org/10.5281/zenodo.1287730&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;more-research-output&quot;&gt;More research output&lt;/h3&gt;

&lt;p&gt;You can find more research output from AnyBody Technology on the &lt;a href=&quot;https://zenodo.org/communities/anybody&quot;&gt;AnyBodyTech Zenodo community page&lt;/a&gt;.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="AMMR" /><category term="Models" /><summary type="html">We have added a DOI for the AMMR repository. This will help user users communicate which version of the AMMR they are using, and make it easy to cite the AMMR.</summary></entry><entry><title type="html">What is new AMMR 2.0</title><link href="https://anyscript.org/news/ammr-2.0/" rel="alternate" type="text/html" title="What is new AMMR 2.0" /><published>2017-11-29T00:00:00+01:00</published><updated>2017-11-29T00:00:00+01:00</updated><id>https://anyscript.org/news/ammr-2.0</id><content type="html" xml:base="https://anyscript.org/news/ammr-2.0/">&lt;p&gt;Join us for the launch of version 7.1 of our musculoskeletal simulation software - The AnyBody Modeling System, and a new version of the AnyBody Model repository (AMMR 2.0).&lt;/p&gt;

&lt;p&gt;In this webcast, Morten Enemark Lund, R&amp;amp;D Engineer at AnyBody Technology, will the new software features and the exciting new model repository which is shipped with version 7.1.&lt;/p&gt;

&lt;p&gt;THe features include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;New lower extremity model (TLEM2.1)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New framework for MoCap models (AnyMoCap)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Manidble model&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New calibration scheme&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Numerous updates to body models and example applications.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the release of the AnyBody Modeling System 7.1 update, we thought it was
time to make a post about all the improvements in the new model repository.&lt;/p&gt;

&lt;p&gt;The AnyBody Managed Model Repository (AMMR) version 2.0 marks the culmination of
a huge task to update our existing models and adding new models and examples.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_new_tutorial.png&quot; alt=&quot;New tutorials website&quot; /&gt;

  &lt;figcaption&gt;The new tutorials&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;new-ammr-documentation&quot;&gt;New AMMR documentation&lt;/h2&gt;

&lt;h2 id=&quot;new-tutorials&quot;&gt;New Tutorials&lt;/h2&gt;

&lt;h2 id=&quot;anymocap&quot;&gt;AnyMoCap&lt;/h2&gt;

&lt;h2 id=&quot;new-lower-extremity-model-version-21&quot;&gt;New Lower Extremity model (Version 2.1)&lt;/h2&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Of course we are not done. There are new model developments in the pipeline, and some of the improvements to the structure of the lower extremity model we would also like to do for the upper body.&lt;/p&gt;

&lt;h2 id=&quot;a-little-history&quot;&gt;A little history&lt;/h2&gt;

&lt;p&gt;The tutorials used to live as compiled HTML (CHM), a binary format for a
documentation system called Microsoft HTML Help. You find this kind of help
resources in many older Windows Programmers.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_old_tutorial.png&quot; alt=&quot;Old tutorials hosted as Microsoft HTML help&quot; /&gt;

  &lt;figcaption&gt;The old Tutorials served through Microsoft HTML help&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Today it may look old fashioned, but it was the best choice for distributing
documentation in 2003 when the first version of AnyBody emerged.&lt;/p&gt;

&lt;p&gt;Microsoft has since discontinued the HTML Help system. Today there are much
better options for software documentation which makes it easier to both use the
tutorials and maintain them.&lt;/p&gt;

&lt;h2 id=&quot;sphinx-for-software-documentation&quot;&gt;Sphinx for software documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; is a tool for generating software
documentation. The Python community originally developed it for creating the
documentation for the Python programming language. Today it is widely used in
many different domains. The Linux community recently (2016) chose Sphinx as the
new documentation system for the Linux kernel. Sphinx is well maintained and
actively developed, and very easy to use.&lt;/p&gt;

&lt;p&gt;Sphinx converts reStructuredText files into HTML, pdf, epub or other formats.
reStructuredText is simply plain text files with extra simple markup to define
headers and other types of formatting.&lt;/p&gt;

&lt;p&gt;A reStructuredText file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Lesson 2: Advanced Concepts
===========================

Open the model from lesson 1 and change the following lines:

.. code-block:: AnyScript

    InverseDynamics.Criterion = {
      Type = §MR_Polynomial§;
    };

Now we have specified polynomial muscle recruitment, which 
comes down to the following objective function:

.. math:: G = \sum_{i} \left( \frac{f_i}{N_i} \right)^p

We have not, however, specified what the power *p* is. In the
absence of a specification, AnyBody assumes *p* = 3, If we 
reload and rerun the model now, we get the following result:

.. figure:: _static/lesson2/chart1.png
   :scale: 50 %
   
   Results with 5 order Polynomial muscle criterion.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the tutorials as plain text, may at first seem like a disadvantage. The
AnyBody tutorials are currently stored as Word documents. But reStructuredText
has many advantages as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better control of formatting and style&lt;/li&gt;
  &lt;li&gt;Easier tracking of updates and changes&lt;/li&gt;
  &lt;li&gt;Pictures and images live outside the document&lt;/li&gt;
  &lt;li&gt;Makes it easier to accept contribution from users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, MS Word can still be used when writing new tutorials. The &lt;code&gt;*.docx&lt;/code&gt; file
can be converted into reStructured text using the &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;
document converter. Pandoc can convert tables, any formatting, embedded images
into reStructuredText. Pandoc even converts equations from MS Word into Latex
style formulas which work in reStructuredText files.&lt;/p&gt;

&lt;h1 id=&quot;hosting-tutorials-on-github&quot;&gt;Hosting tutorials on GitHub&lt;/h1&gt;

&lt;p&gt;The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Source files:&lt;/strong&gt; &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;https://github.com/AnyBody/anybody-tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web page:&lt;/strong&gt; &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;https://anyscript.org/tutorials/dev&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contributions are always welcome! So if you find typos, missing links or
anything else help us fix it. It is easy. Just fork &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&amp;gt;&quot;&gt;the repository on
GitHub&lt;/a&gt;, make the changes, and
issue a pull request.&lt;/p&gt;

&lt;p&gt;Every pull request is automatically tested, to ensure that Sphinx builds the
tutorials without errors. This done using &lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot;&gt;Travis
CI&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See status of the Travis CI build: &lt;a href=&quot;https://travis-ci.org/AnyBody/anybody-tutorial&quot;&gt;&lt;img src=&quot;https://travis-ci.org/AnyBody/anybody-tutorial.svg?branch=master&quot; alt=&quot;Build
Status&quot; /&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once a change is accepted and merged into the repository the script also automatically deploys the tutorial web page.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="AMMR" /><category term="Models" /><summary type="html">With the release of the AnyBody Modeling System 7.1 update, we thought it was time to make a post about all the improvements in the new model repository.</summary></entry><entry><title type="html">Getting AnyBody and Numpy to work</title><link href="https://anyscript.org/news/Numpy-and-scipy/" rel="alternate" type="text/html" title="Getting AnyBody and Numpy to work" /><published>2017-11-25T00:00:00+01:00</published><updated>2017-11-25T00:00:00+01:00</updated><id>https://anyscript.org/news/Numpy-and-scipy</id><content type="html" xml:base="https://anyscript.org/news/Numpy-and-scipy/">&lt;p&gt;With the release of the AnyBody Modeling System 7.1 update, we thought it was
time to make a post about all the improvements in the new model repository.&lt;/p&gt;

&lt;p&gt;The AnyBody Managed Model Repository (AMMR) version 2.0 marks the culmination of
a huge task to update our existing models and adding new models and examples.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_new_tutorial.png&quot; alt=&quot;New tutorials website&quot; /&gt;

  &lt;figcaption&gt;The new tutorials&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;new-ammr-documentation&quot;&gt;New AMMR documentation&lt;/h2&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Of course we are not done. There are new model developments in the pipeline, and some of the improvements to the structure of the lower extremity model we would also like to do for the upper body.&lt;/p&gt;

&lt;h2 id=&quot;a-little-history&quot;&gt;A little history&lt;/h2&gt;

&lt;p&gt;The tutorials used to live as compiled HTML (CHM), a binary format for a
documentation system called Microsoft HTML Help. You find this kind of help
resources in many older Windows Programmers.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_old_tutorial.png&quot; alt=&quot;Old tutorials hosted as Microsoft HTML help&quot; /&gt;

  &lt;figcaption&gt;The old Tutorials served through Microsoft HTML help&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Today it may look old fashioned, but it was the best choice for distributing
documentation in 2003 when the first version of AnyBody emerged.&lt;/p&gt;

&lt;p&gt;Microsoft has since discontinued the HTML Help system. Today there are much
better options for software documentation which makes it easier to both use the
tutorials and maintain them.&lt;/p&gt;

&lt;h2 id=&quot;sphinx-for-software-documentation&quot;&gt;Sphinx for software documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; is a tool for generating software
documentation. The Python community originally developed it for creating the
documentation for the Python programming language. Today it is widely used in
many different domains. The Linux community recently (2016) chose Sphinx as the
new documentation system for the Linux kernel. Sphinx is well maintained and
actively developed, and very easy to use.&lt;/p&gt;

&lt;p&gt;Sphinx converts reStructuredText files into HTML, pdf, epub or other formats.
reStructuredText is simply plain text files with extra simple markup to define
headers and other types of formatting.&lt;/p&gt;

&lt;p&gt;A reStructuredText file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Lesson 2: Advanced Concepts
===========================

Open the model from lesson 1 and change the following lines:

.. code-block:: AnyScript

    InverseDynamics.Criterion = {
      Type = §MR_Polynomial§;
    };

Now we have specified polynomial muscle recruitment, which 
comes down to the following objective function:

.. math:: G = \sum_{i} \left( \frac{f_i}{N_i} \right)^p

We have not, however, specified what the power *p* is. In the
absence of a specification, AnyBody assumes *p* = 3, If we 
reload and rerun the model now, we get the following result:

.. figure:: _static/lesson2/chart1.png
   :scale: 50 %
   
   Results with 5 order Polynomial muscle criterion.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the tutorials as plain text, may at first seem like a disadvantage. The
AnyBody tutorials are currently stored as Word documents. But reStructuredText
has many advantages as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better control of formatting and style&lt;/li&gt;
  &lt;li&gt;Easier tracking of updates and changes&lt;/li&gt;
  &lt;li&gt;Pictures and images live outside the document&lt;/li&gt;
  &lt;li&gt;Makes it easier to accept contribution from users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, MS Word can still be used when writing new tutorials. The &lt;code&gt;*.docx&lt;/code&gt; file
can be converted into reStructured text using the &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;
document converter. Pandoc can convert tables, any formatting, embedded images
into reStructuredText. Pandoc even converts equations from MS Word into Latex
style formulas which work in reStructuredText files.&lt;/p&gt;

&lt;h1 id=&quot;hosting-tutorials-on-github&quot;&gt;Hosting tutorials on GitHub&lt;/h1&gt;

&lt;p&gt;The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Source files:&lt;/strong&gt; &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;https://github.com/AnyBody/anybody-tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web page:&lt;/strong&gt; &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;https://anyscript.org/tutorials/dev&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contributions are always welcome! So if you find typos, missing links or
anything else help us fix it. It is easy. Just fork &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&amp;gt;&quot;&gt;the repository on
GitHub&lt;/a&gt;, make the changes, and
issue a pull request.&lt;/p&gt;

&lt;p&gt;Every pull request is automatically tested, to ensure that Sphinx builds the
tutorials without errors. This done using &lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot;&gt;Travis
CI&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See status of the Travis CI build: &lt;a href=&quot;https://travis-ci.org/AnyBody/anybody-tutorial&quot;&gt;&lt;img src=&quot;https://travis-ci.org/AnyBody/anybody-tutorial.svg?branch=master&quot; alt=&quot;Build
Status&quot; /&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once a change is accepted and merged into the repository the script also automatically deploys the tutorial web page.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="AMMR" /><category term="Models" /><summary type="html">In this post we will explore why it is hard to use the NumPy and Scipy packages from AnyBody.</summary></entry><entry><title type="html">Freeing the AnyBody Tutorials</title><link href="https://anyscript.org/news/freeing-the-anybody-tutorials/" rel="alternate" type="text/html" title="Freeing the AnyBody Tutorials" /><published>2017-08-14T00:00:00+02:00</published><updated>2017-08-14T00:00:00+02:00</updated><id>https://anyscript.org/news/freeing-the-anybody-tutorials</id><content type="html" xml:base="https://anyscript.org/news/freeing-the-anybody-tutorials/">&lt;p&gt;Anyone, who works with AnyBody modeling system has at one time used the AnyBody
tutorials. They are a valuable resource when learning to use the AnyBody
Modeling System and there are more than 15 different tutorials covering
everything from ‘Getting Started’ tutorials for the new users to very advanced
topics like force dependent kinematics and FEA interfaces.&lt;/p&gt;

&lt;p&gt;Today, we are releasing a new &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;web based version&lt;/a&gt; of the tutorials.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_new_tutorial.png&quot; alt=&quot;New tutorials website&quot; /&gt;

  &lt;figcaption&gt;The new tutorials&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;a-little-history&quot;&gt;A little history&lt;/h2&gt;

&lt;p&gt;The tutorials used to live as compiled HTML (CHM), a binary format for a
documentation system called Microsoft HTML Help. You find this kind of help
resources in many older Windows Programmers.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_old_tutorial.png&quot; alt=&quot;Old tutorials hosted as Microsoft HTML help&quot; /&gt;

  &lt;figcaption&gt;The old Tutorials served through Microsoft HTML help&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Today it may look old fashioned, but it was the best choice for distributing
documentation in 2003 when the first version of AnyBody emerged.&lt;/p&gt;

&lt;p&gt;Microsoft has since discontinued the HTML Help system. Today there are much
better options for software documentation which makes it easier to both use the
tutorials and maintain them.&lt;/p&gt;

&lt;h2 id=&quot;sphinx-for-software-documentation&quot;&gt;Sphinx for software documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; is a tool for generating software
documentation. The Python community originally developed it for creating the
documentation for the Python programming language. Today it is widely used in
many different domains. The Linux community recently (2016) chose Sphinx as the
new documentation system for the Linux kernel. Sphinx is well maintained and
actively developed, and very easy to use.&lt;/p&gt;

&lt;p&gt;Sphinx converts reStructuredText files into HTML, pdf, epub or other formats.
reStructuredText is simply plain text files with extra simple markup to define
headers and other types of formatting.&lt;/p&gt;

&lt;p&gt;A reStructuredText file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Lesson 2: Advanced Concepts
===========================

Open the model from lesson 1 and change the following lines:

.. code-block:: AnyScript

    InverseDynamics.Criterion = {
      Type = §MR_Polynomial§;
    };

Now we have specified polynomial muscle recruitment, which 
comes down to the following objective function:

.. math:: G = \sum_{i} \left( \frac{f_i}{N_i} \right)^p

We have not, however, specified what the power *p* is. In the
absence of a specification, AnyBody assumes *p* = 3, If we 
reload and rerun the model now, we get the following result:

.. figure:: _static/lesson2/chart1.png
   :scale: 50 %
   
   Results with 5 order Polynomial muscle criterion.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the tutorials as plain text, may at first seem like a disadvantage. The
AnyBody tutorials are currently stored as Word documents. But reStructuredText
has many advantages as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better control of formatting and style&lt;/li&gt;
  &lt;li&gt;Easier tracking of updates and changes&lt;/li&gt;
  &lt;li&gt;Pictures and images live outside the document&lt;/li&gt;
  &lt;li&gt;Makes it easier to accept contribution from users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, MS Word can still be used when writing new tutorials. The &lt;code&gt;*.docx&lt;/code&gt; file
can be converted into reStructured text using the &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;
document converter. Pandoc can convert tables, any formatting, embedded images
into reStructuredText. Pandoc even converts equations from MS Word into Latex
style formulas which work in reStructuredText files.&lt;/p&gt;

&lt;h1 id=&quot;hosting-tutorials-on-github&quot;&gt;Hosting tutorials on GitHub&lt;/h1&gt;

&lt;p&gt;The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Source files:&lt;/strong&gt; &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;https://github.com/AnyBody/anybody-tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web page:&lt;/strong&gt; &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;https://anyscript.org/tutorials/dev&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contributions are always welcome! So if you find typos, missing links or
anything else help us fix it. It is easy. Just fork &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;the repository on
GitHub&lt;/a&gt;, make the changes, and
issue a pull request.&lt;/p&gt;

&lt;p&gt;Every pull request is automatically tested, to ensure that Sphinx builds the
tutorials without errors. This done using &lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot;&gt;Travis
CI&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See status of the Travis CI build: &lt;a href=&quot;https://travis-ci.org/AnyBody/anybody-tutorial&quot;&gt;&lt;img src=&quot;https://travis-ci.org/AnyBody/anybody-tutorial.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once a change is accepted and merged into the repository the script also
automatically deploys the tutorial web page.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="Tutorials" /><category term="Sphinx" /><summary type="html">Anyone, who works with AnyBody modeling system has at one time used the the AnyBody tutorials. They are a valuable resources when learning to use the AnyBody Modeling System</summary></entry><entry><title type="html">AnyScript support in Visual Studio Code</title><link href="https://anyscript.org/editors/anyscript-in-vscode/" rel="alternate" type="text/html" title="AnyScript support in Visual Studio Code" /><published>2017-07-15T00:00:00+02:00</published><updated>2017-07-15T00:00:00+02:00</updated><id>https://anyscript.org/editors/anyscript-in-vscode</id><content type="html" xml:base="https://anyscript.org/editors/anyscript-in-vscode/">&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;(VS Code) is one of the newest text
editors to join the group of new powerful source code editors like &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;,  &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; and &lt;a href=&quot;http://brackets.io&quot;&gt;brackets&lt;/a&gt;. All of which have become extremely popular in recent years.&lt;/p&gt;

&lt;p&gt;Visual Studio Code  is currently my favorite text editor. It is cross-platform, lightweight, extensible and powerful. So of
course I want to use it when working with AnyScript. In this post I will show a new
AnyScript extension for VSCode, that does syntax highlighting, code folding,
and snippets.&lt;/p&gt;

&lt;p&gt;This is the second post in our series on using external editors for AnyScript.
&lt;a href=&quot;https://anyscript.org//editors/notepad++-and-anyscript/&quot;&gt;In the first post&lt;/a&gt;)
I showed a handy extension for &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt;,
so if you use Notepad++ check that post.&lt;/p&gt;

&lt;h2 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;/h2&gt;
&lt;p&gt;Visual Studio Code or VS Code is a source code editor developed by Microsoft for
both Windows, Linux and MacOS. It is free, open source and includes a lot of
advanced features for working with source code. It is also very customizable so 
users can change themes, keyboard shortcuts and much more.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_screenshot.png&quot; alt=&quot;VSCode&quot; /&gt;

  &lt;figcaption&gt;Screenshot from Visual Studio Code, with AnyScript syntax highlighting.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;VS code looks a little different from traditional Windows programs, but it is
easy enough to use. The simple looks deceives. VS Code has all the same features
as for example &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt;, and if you miss a certain feature VS Code has a good extension system. So the chances are
that there is a user contributed extension to help your specific need.&lt;/p&gt;

&lt;h2 id=&quot;anyscript-extension&quot;&gt;AnyScript Extension&lt;/h2&gt;
&lt;p&gt;In the screen shoot above shows a file with AnyScript syntax highlighting. Highlighting in AnyScript files works as soon as the AnyScript extension is installed. It is easy to install. Just click the extension icon at the bottom of left sidebar and
search for AnyScript. Then click install.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_extension_install.png&quot; alt=&quot;VSCode&quot; /&gt;

  &lt;figcaption&gt;Installing the AnyScript extension.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;syntax-highlighting-and-code-folding&quot;&gt;Syntax highlighting and code folding&lt;/h3&gt;

&lt;p&gt;Once the extension is installed the all AnyScript files will have highlighting.&lt;/p&gt;

&lt;p&gt;THe plugin also gives you code folding, which allows you to collapse classes and
folders. A feature which is really handy when working on large files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_folding.png&quot; alt=&quot;VSCode code folding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VS hCode supports code snippets which are templates that makes it easier to write
repeating code patterns. This part isn’t fully supported by the extension yet.
But I have added few snippets for the following classes and functions:
&lt;code&gt;AnyDrawRefFrame&lt;/code&gt;, &lt;code&gt;AnyRefNode&lt;/code&gt;, &lt;code&gt;RotMat&lt;/code&gt;, &lt;code&gt;AnyFunConst&lt;/code&gt;,  &lt;code&gt;AnyFolder&lt;/code&gt;,
&lt;code&gt;AnyKinMeasureOrg&lt;/code&gt;, &lt;code&gt;AnyKinRotational&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The snippet inserter is activated by pressing &lt;code&gt;ctrl-shift-P&lt;/code&gt; and then writing
&lt;code&gt;insert snippet&lt;/code&gt;. Note: you need to be in a AnyScript file to get the AnyScript
snippets.&lt;/p&gt;

&lt;p&gt;Snippets can also be inserted using the tab completer. So if you start to type
the name of the class e.g. &lt;code&gt;AnyDrawRe&lt;/code&gt; and press tab the snippet is inserted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_snippets.gif&quot; alt=&quot;VSCode code folding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The snippets are just meant as a test, but hopefully we can have snippets for all the AnyScript classes in the future.&lt;/p&gt;

&lt;h3 id=&quot;help-make-the-extension-better&quot;&gt;Help make the extension better&lt;/h3&gt;

&lt;p&gt;Here is an link to page where the extension live:
https://github.com/AnyBody/vscode-anyscript. Any improvements and help is most
appreciated.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="Syntax highlighting" /><category term="Visual Studio Code" /><summary type="html">Visual Studio Code is currently my favorite editor, so it natural that it should also support AnyScript.</summary></entry><entry><title type="html">Add limits to the Range of Motion</title><link href="https://anyscript.org/tools/rom-limits/" rel="alternate" type="text/html" title="Add limits to the Range of Motion" /><published>2017-05-04T00:00:00+02:00</published><updated>2017-05-04T00:00:00+02:00</updated><id>https://anyscript.org/tools/rom-limits</id><content type="html" xml:base="https://anyscript.org/tools/rom-limits/">&lt;p&gt;In this post, I will show a new AnyScript class template to add range-of-motion
limits to Human body model.&lt;/p&gt;

&lt;p&gt;The implementation consist of two AnyScript class templates. A high
level class template &lt;code&gt;RangeOfMotionLimits&lt;/code&gt; which makes it easy to add
Range-of-motion limits to all the joints on the Musculoskeltal model.&lt;/p&gt;

&lt;p&gt;Behind the scenes the high-level template uses a more generic low-leve template
&lt;code&gt;KinLimitsDriver&lt;/code&gt;, which can add limits to any kinematic measure.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage:&lt;/h2&gt;

&lt;p&gt;To use the high level class template &lt;code&gt;RangeOfMotionLimits&lt;/code&gt; you must first 
include the file in which it is defined.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;#include &quot;../path/to/RangeOfMotionLimits_template.any&quot;&lt;/code&gt; in the beginning
of your main file. Then create the &lt;code&gt;RangeOfMotionLimits&lt;/code&gt; class inside Main after 
the human model is included in the model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;../path/to/RangeOfMotionLimits_template.any&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// It is important that the human model is include&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// before the JointLimit template. This is to ensure&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// that all BM statements are defined.&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;ANYBODY_PATH_BODY&amp;gt;/HumanModel.any&amp;quot;&lt;/span&gt;


  &lt;span class=&quot;n&quot;&gt;RangeOfMotionLimits&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROM_Limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ARM_RIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_ARM_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ARM_LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_ARM_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LEG_RIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_LEG_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LEG_LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_LEG_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TRUNK_NECK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BM_TRUNK_NECK&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Example of changing af few of the limits&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Trunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PelvisThoraxExtension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElbowPronation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If some joint should not have range of motion limits, the class accepts
arguments for disabling individual joint limits:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;RangeOfMotionLimits&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoMLimits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PELVIS_THORAX_LATERAL_BENDING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Off&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;find-the-code-on-github&quot;&gt;Find the code on GitHub&lt;/h3&gt;

&lt;p&gt;The AnyScript template is &lt;a href=&quot;https://github.com/AnyBody/range-of-motion-limits&quot;&gt;hosted on GitHub&lt;/a&gt;,
where you can find examples and documentation on the
&lt;code&gt;class_template&lt;/code&gt; and the options which are available.&lt;/p&gt;</content><author><name>Søren Tørholm, PhD</name></author><category term="kinematics" /><category term="joints" /><summary type="html">In this post you will see how to add range-of-motion limits to your simulations.</summary></entry><entry><title type="html">Calculating the Instantaneous Axis of Rotation</title><link href="https://anyscript.org/tools/instantaneous-axis-of-rotation/" rel="alternate" type="text/html" title="Calculating the Instantaneous Axis of Rotation" /><published>2017-04-27T00:00:00+02:00</published><updated>2017-04-27T00:00:00+02:00</updated><id>https://anyscript.org/tools/instantaneous-axis-of-rotation</id><content type="html" xml:base="https://anyscript.org/tools/instantaneous-axis-of-rotation/">&lt;p&gt;The instantaneous axis of rotation between two bodies is a &lt;a href=&quot;https://scholar.google.dk/scholar?as_sdt=1,5&amp;amp;q=biomechanics+instantaneous+axis+of+rotation&amp;amp;hl=en&amp;amp;as_vis=1&quot;&gt;useful concept in
biomechanics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we will dig into how to calculate the instantaneous
axis of rotation and show an AnyScript &lt;code&gt;class_template&lt;/code&gt; that calculate and displays the
axis between any two reference frames in the AnyBody
Modeling System.&lt;/p&gt;

&lt;p&gt;Before we dive into the AnyScript implementation let us look briefly at the math
behind the instantaneous axis of rotation.&lt;/p&gt;

&lt;h2 id=&quot;rigid-body-motion-in-3d&quot;&gt;Rigid body motion in 3D&lt;/h2&gt;

&lt;p&gt;We can view any displacement of a body in a three-dimensional space as a
rotation around a &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler%27s_rotation_theorem&quot;&gt;single axis and a translation along that
axis&lt;/a&gt;. This gives rise
to the idea of a screw motion in 3D along what is also called the helical axis.
If we split the movement up into infinitesimally small movements each of these
will have an rotation axis and a linear velocity along that axis. This is the
instantaneous axis of rotation, and as the name indicate will change direction
and location as the object moves.&lt;/p&gt;

&lt;p&gt;The angular velocity of rigid body is a vector quantity shared by all point of
the rigid body. My old engineering math book defines it from the rate of change
of the rotation matrix $R$:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{ {\mathrm d} }{ {\mathrm d}t}R = \vec{\omega} \times R&lt;/script&gt;

&lt;p&gt;If we know the angular and linear velocity of any point on a rigid body, we can
calculate the properties of the screw motion and the instantaneous axis of
rotation.&lt;/p&gt;

&lt;p&gt;Using $\vec{\omega}$ we can write the velocity $\vec{v}_P$ of a point $P$ at
some distance $\vec{r}$ from the instantaneous axis of rotation as a sum of the
linear velocity $\vec{v}_C$ along the axis of rotation and the tangential
velocity around the axis of rotation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:1} \vec{v}_P = \vec{v}_C + \vec{\omega} \times \vec{r} \end{equation}&lt;/script&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 400px&quot;&gt;
    &lt;img src=&quot;https://anyscript.org/assets/images/posts/iaor_drawing.png&quot; alt=&quot;Axis drawing&quot; /&gt;
    &lt;figcaption&gt;Rigid body rotating around an axis of rotation.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Similarly we can also calculate backwards and find the intantanous axis of
rotation at some distance $-\vec{r}$ from any point if we know the linear
velocity of the point and the angular velocity. This is given by:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:2} -\vec{r}= \frac{\vec{\omega} \times \vec{v}_P }{
\vec{\omega}\cdot\vec{\omega} } \end{equation}&lt;/script&gt;

&lt;p&gt;Thus if know the position of a point $\vec{r}_P$, its 
linear velocity $\vec{v}_P$ we can find closest point
$\vec{r}_C$ on the rotation axis as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec{r}_C = \vec{r}_P - \vec{r} = \vec{r}_P + \frac{\vec{\omega}\times\vec{v}_P}{\vec{\omega}\cdot\vec{\omega} }&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Short proof of $\ref{eq:2}$, skip it if you like:&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Start with $\vec{\omega} \times \vec{v}_P$ and insert $\ref{eq:1}$. Since
$\vec{\omega}$ and $\vec{v}_C$ are parallel their cross product cancel out.&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\require{cancel} \vec{\omega} \times \vec{v}_P = \vec{\omega} \times (\vec{v}_C+\vec{\omega} \times \vec{r})= \cancel{\vec{\omega} \times \vec{v}_C}+\vec{\omega}\times (\vec{\omega} \times \vec{r})&lt;/script&gt;

  &lt;p&gt;Next we use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Triple_product#Vector_triple_product&quot;&gt;vector tripple product&lt;/a&gt; to expand, and we note that $\vec{\omega}\cdot\vec{r}$ cancel out since the shortest vector from the rotation axis to any point is always perpendicular to angular velocity:&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\require{cancel}\vec{\omega}\times (\vec{\omega} \times \vec{r}) = \vec{\omega}(\cancel{\vec{\omega}\cdot\vec{r} })-\vec{r}(\vec{\omega}\cdot\vec{\omega})&lt;/script&gt;

  &lt;p&gt;Finally we have:&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec{\omega} \times \vec{v}_P = -\vec{r}(\vec{\omega}\cdot\vec{\omega}) \Leftrightarrow -\vec{r}= \frac{\vec{\omega} \times \vec{v}_P }{
\vec{\omega}\cdot\vec{\omega} }&lt;/script&gt;

  &lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer:&lt;/h3&gt;

  &lt;p&gt;The math may not be strictly accurate. Sorry, I am an Engineer :) If
you have more math skill than I please help make this more concise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;/h2&gt;

&lt;p&gt;If for example, we have a rigid body with angular velocity $\vec{\omega}$ and
some point $P$ with position $\vec{r}_P$ and velocity $\vec{v}_p$ then we can
define the different properties:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Quantity&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\omega = |\vec{\omega}|&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;The magnitude of angular rotation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vec{e}_{IOAR} = \frac{\vec{\omega} }{\omega}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;The direction of the intantanous axis of rotation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vec{r}_C = \vec{r}_P + \frac{\vec{\omega}\times\vec{v}_P}{\vec{\omega}\cdot\vec{\omega} }&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;The point C on the intantanous axis of rotation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;h = \frac{\vec{\omega} \cdot \vec{v}_P}{\vec{\omega}\cdot\vec{\omega} }&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;Ratio of angular to linear angular velocity&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vec{v}_C = h\vec{\omega}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;The linear velocity at point $C$ along the axis of rotation.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p class=&quot;notice&quot;&gt;The list of properties is inspired by this answer from &lt;a href=&quot;https://physics.stackexchange.com/questions/173987/how-can-i-relate-linear-and-angular-motion-using-a-single-formula/174209#174209&quot;&gt;StackExchange
Physics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All we need to know is the rotation velocity of a body and the velocity of any
point to find the instantaneous axis of rotation.&lt;/p&gt;

&lt;h2 id=&quot;anyscript-implementation&quot;&gt;AnyScript implementation&lt;/h2&gt;

&lt;p&gt;In AnyScript we can easily find the angular velocity, and the linear velocity of
a reference frame using the two classes &lt;code&gt;AnyKinRotational&lt;/code&gt; and &lt;code&gt;AnyKinLinear&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An implementaion to find the instantanous axis of rotation could be as simple
as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;AnyKinRotational&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rotational&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;AngVelOnOff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;AnyRefFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ref1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReferenceFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 

   &lt;span class=&quot;kt&quot;&gt;AnyKinLinear&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;AnyRefFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ref1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReferenceFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
   
   &lt;span class=&quot;c1&quot;&gt;/// Direction of the instantaneous axis of rotation&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;AnyVec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e_iaor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rotational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vnorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rotational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;/// The point on the rotation axis closest to ReferenceFrame origin&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;AnyVec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_iaor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rotational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vnorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rotational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is important to set &lt;code&gt;AngVelOnOff = On;&lt;/code&gt; to make &lt;code&gt;AnyKinRotational&lt;/code&gt; output the
angular velocity vector. Of course this the code above is very simplified. We
would also like a way to find the axis between between two moving bodies, and
also draw the axis in the process.&lt;/p&gt;

&lt;h3 id=&quot;anyscript-class-template&quot;&gt;AnyScript class template&lt;/h3&gt;

&lt;p&gt;We have created a custom class template that makes it easy to calculate the
properties listed above and display the instantaneous axis of rotation. Here is
a short example on how to use the class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;path/to/InstantaneousAxisOfRotation.any&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InstantaneousAxisOfRotation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAOR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Body1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Body2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Segments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ball&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is all it takes. Here a how it looks for few very simple models:&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;img src=&quot;https://anyscript.org/assets/images/posts/iaor_ball.gif&quot; /&gt;&lt;img src=&quot;https://anyscript.org/assets/images/posts/iaor_reffreames.gif&quot; /&gt;
    &lt;figcaption&gt;Two examples of displaying the instanteneous axis of rotation for two simple models.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The code will eventually become part of the AnyBody Managed Model Repository
(AMMR), which is shipped with the AnyBody Modeling System. But until the next
release of the AMMR, the class template can be downloaded from GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AnyBody/iaor&quot; class=&quot;btn btn--success btn--large&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; Get IAOR class template&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://physics.stackexchange.com/questions/173987/how-can-i-relate-linear-and-angular-motion-using-a-single-formula/174209#174209&quot;&gt;QA on Physics stackexchange&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Angular_velocity&quot;&gt;Wikipedia on angular velocity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Morten Enemark Lund</name></author><category term="Kinematics" /><summary type="html">The instantaneous axis of rotation between two bodies is a useful concept in biomechanics. In this post, we will dig into how to calculate the instantaneous axis of rotation.</summary></entry><entry><title type="html">AnyMoCap: A model framework motion caputure based models</title><link href="https://anyscript.org/anymocap/anymocap-motion-capture-framework/" rel="alternate" type="text/html" title="AnyMoCap: A model framework motion caputure based models" /><published>2017-04-25T00:00:00+02:00</published><updated>2017-04-25T00:00:00+02:00</updated><id>https://anyscript.org/anymocap/anymocap-motion-capture-framework</id><content type="html" xml:base="https://anyscript.org/anymocap/anymocap-motion-capture-framework/">&lt;p&gt;The AnyMoCap model is an effort to create a simple and unified framework for
doing any kind of mocap analysis with the &lt;a href=&quot;http://anybodytech.com&quot;&gt;AnyBody Modeling
System&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is first post in  a series on the AnyMoCap framework. In a series posts I
will show how to use the frame and presents some of the features that makes it
much easier to do motion capture based modelling.&lt;/p&gt;

&lt;p&gt;Current motion caputure model examples in the &lt;a href=&quot;http://anybodytech.com/software/ammr&quot;&gt;AnyBody Managed Model Repository
(AMMR)&lt;/a&gt; are releative complex and quite
difficult to understand for new users.&lt;/p&gt;

&lt;p&gt;The reason is that the MoCap models are different from the other examples models
in the AMMR. Most importantly, MoCap models usually require an over-determinate
kinematic solver to handle the excess in information that the optical markers
provide. The over-determinate solver in AMS works great, but it can only find
velocities and accelerations numerically. That has some performance issue when
running inverse dynamics analysis. To overcome the problem, the MOCAP analysis
is split into a two-step producedure. The two steps are ‘Marker tracking’ and 
‘Inverse dynamic analysis’ on the figure below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1038978/24096596/92051708-0d62-11e7-9cdd-360fc4b28339.png&quot; alt=&quot;Model-structure&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The overdeterminate kinematic analysis solves the marker tracking problem, and
writes joint angles to a a set of files. These joint angles can then be used
with the determinate kinematic solver in the inverse dynamic analysis.&lt;/p&gt;

&lt;h2 id=&quot;model-structure&quot;&gt;Model structure.&lt;/h2&gt;

&lt;p&gt;The AnyMoCap framwork contains two main folder &lt;code&gt;Examples&lt;/code&gt; and &lt;code&gt;Model&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AnyMoCap/ 
├───Model/
├───Examples/ 
│   ├───Plug-in-gait-FullBody/
│   ├───Plug-in-gait-LowerExtremity/
│   └───SpecialFeatures/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The core of the framework is located under &lt;code&gt;Model/&lt;/code&gt;. The core files will
eventually become part of the AMMR, and you shouldn’t need to change these files
unless you want to help improve the AnyMoCap framework (See “Contributing”
below.)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Examples/&lt;/code&gt; folder contains examples of how to use the framework. Thre are
currently two full blown examples of how to create a FullBody and LowerExtremity
model with the Plug-in-Gait marker protocol. Other examples with other marker
protocols will come soon. The &lt;code&gt;SpecialFeatures/&lt;/code&gt; folder contain small examples
on specific features of the framework.&lt;/p&gt;

&lt;p&gt;Examples are self-contained and could be locaated anywhere as long they have a
valid reference link to where the AnyMoCap model is located on your computer.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;</content><author><name>Morten Enemark Lund</name></author><category term="Motion Capture" /><summary type="html">Creating motion caputure based models is difficult. But this often what new users want to start out working on.</summary></entry></feed>