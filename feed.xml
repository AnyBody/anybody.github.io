<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://anyscript.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://anyscript.org/" rel="alternate" type="text/html" /><updated>2019-02-14T11:41:34+01:00</updated><id>https://anyscript.org/feed.xml</id><title type="html">AnyScript Community</title><subtitle>A community for the users of AnyBody Modeling System and the AnyScript language.</subtitle><author><name>AnyBody Technology</name><email>sales@anybodytech.com</email></author><entry><title type="html">New AnyScript Forum</title><link href="https://anyscript.org/news/New-forum-system/" rel="alternate" type="text/html" title="New AnyScript Forum" /><published>2019-02-13T00:00:00+01:00</published><updated>2019-02-13T00:00:00+01:00</updated><id>https://anyscript.org/news/New-forum-system</id><content type="html" xml:base="https://anyscript.org/news/New-forum-system/">&lt;p&gt;We have just launched a new forum site for the AnyScript community. The new site replaces the old forum which has served the last 10 years as a place for new and experienced users to get and give help on the AnyBody Modeling System.&lt;/p&gt;

&lt;p&gt;The old forum had served well. Around 10.000 posts and 1800 topics were created on the old forum since 2009. But the old forum had started to feel a bit old fashioned and outdated. So it was time to upgrade our community page.&lt;/p&gt;

&lt;p&gt;The choice for a new system fell on Discourse. &lt;a href=&quot;https://www.discourse.org&quot;&gt;Discourse&lt;/a&gt; is modern forum system which works well on both desktop and mobile. It has a lot of nice features:&lt;/p&gt;

&lt;h2 id=&quot;conversations-and-not-pages&quot;&gt;Conversations and not pages:&lt;/h2&gt;

&lt;p&gt;Posts structured by conversations, and not spread across multiple pages where you have to click the next page constantly. Instead, new content loads automatically. Just scroll down.&lt;/p&gt;

&lt;video preload=&quot;auto&quot; width=&quot;80%&quot; poster=&quot;/assets/images/posts/new-forum_scroll.jpg&quot; style=&quot;display:block; margin: 0 auto;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot;&gt;
    &lt;source src=&quot;/assets/images/posts/new-forum_scroll.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;h2 id=&quot;effective-search&quot;&gt;Effective search:&lt;/h2&gt;

&lt;p&gt;Search now works infinitely better than before. Just type in your search terms to easily find related posts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/new-forum_search.png&quot; alt=&quot;Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is also options to search individual topics or options to refine the search to dates, categories, tags, users etc. So now it is much easier to find the relevant information without having to make a new topic.&lt;/p&gt;

&lt;h2 id=&quot;nice-editor-with-preview&quot;&gt;Nice editor with preview&lt;/h2&gt;

&lt;p&gt;The editor in really nice. It supports a live preview pane, markdown formatting, Math using LaTeX, drag-drop images an much more. Even if you are not familiar with markdown syntax it is easy to use with the buttons on the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/new-forum_editor.png&quot; alt=&quot;Search&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;migration-to-the-new-forum-system&quot;&gt;Migration to the new forum system&lt;/h1&gt;

&lt;p&gt;We migrated all the posts from the old system to the new system as well as all users how had previously posted on the old forum. Passwords could not be migrated, so you will have to reset your password the first time you log in. Just click the ‘I forgot my password’ link the first time you access the new site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/new-forum_login.png&quot; alt=&quot;Search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have never used the forum system you will have to create a new user account. The same is case if you got a new email address or if you just want to start from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it now:&lt;/strong&gt; So give the new forum a try. &lt;a href=&quot;http://forum.anyscript.org&quot;&gt;Log in and join the community&lt;/a&gt; {: .notice–success}&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="web site" /><summary type="html">We have just launched a new forum site for the AnyScript community.</summary></entry><entry><title type="html">Solving optimization problems using Python</title><link href="https://anyscript.org/tools/Solving-Optimization-Problems-Using-Python/" rel="alternate" type="text/html" title="Solving optimization problems using Python" /><published>2018-11-13T00:00:00+01:00</published><updated>2018-11-13T00:00:00+01:00</updated><id>https://anyscript.org/tools/Solving-Optimization-Problems-Using-Python</id><content type="html" xml:base="https://anyscript.org/tools/Solving-Optimization-Problems-Using-Python/">&lt;p&gt;The AnyBody Modeling System (AMS) provides a build-in optimization
class &lt;code&gt;AnyOptStudy&lt;/code&gt;, and with it you have the opportunity to solve advanced mathematical optimization problems.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;See also:&lt;/strong&gt; You can get a taste of how it works in the &lt;a href=&quot;https://anyscript.org/tutorials/Parameter_studies_and_optimization/lesson2.html&quot;&gt;newly updated tutorial on  parameter and optimization studies&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;extending-the-optimization&quot;&gt;Extending the optimization&lt;/h2&gt;

&lt;p&gt;Of course there can be situations were you want to do a little more than what the AMS optimization offers. Say you have two seperate models were you wanted to optimize some parameter across
the performance in both models? or perhaps you wanted to use a specific algorithm suitable for your exact problem? To solve these kinds of problems, you
could perform the optimization process from a third party software.&lt;/p&gt;

&lt;p&gt;In this post we will demonstrate how these problems can be solved using Python.
This topic is part of a new &lt;a href=&quot;https://anyscript.org/tutorials/Parameter_studies_and_optimization/lesson3.html&quot;&gt;Anybody Tutorial&lt;/a&gt;
which describes the content of this post in
detail.&lt;/p&gt;

&lt;p&gt;As part of the post we will show how to integrate the &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/index.html&quot;&gt;Scipy&lt;/a&gt; optimization package
&lt;code&gt;Scipy.optimize.minimize&lt;/code&gt; by running the &lt;a href=&quot;https://anyscript.org/ammr-doc/auto_examples/Sports/plot_BikeModel2D.html#sphx-glr-auto-examples-sports-plot-bikemodel2d-py&quot;&gt;Anybody 2D bike model&lt;/a&gt; from Python, using the AnyPyTools package.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot; style=&quot;width: 550px&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/2DBikeModel.jpg&quot; alt=&quot;2D Bike Model&quot; /&gt;
  &lt;figcaption&gt;Fig. 1: The 2D bike model used in this example and the new tutorial.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;optimization-example&quot;&gt;Optimization example&lt;/h2&gt;

&lt;p&gt;The process of performing optimization of AMS models through Python can be sketched in four steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Defining a function to call the models using AnyPyTools and extract the designvariables&lt;/li&gt;
  &lt;li&gt;Defining a objective function to be either minimized or maximized&lt;/li&gt;
  &lt;li&gt;Defining the constraints and bounds of the problem&lt;/li&gt;
  &lt;li&gt;Running the optimization&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And the whole Python code to complete these four steps could look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;anypytools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyPyProcess&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;anypytools.macro_commands&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperationRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetValue&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saddle_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saddle_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Run the AnyBody model and return the metabolism results&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;macro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;BikeModel2D.main.any&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Main.BikeParameters.SaddleHeight&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saddle_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Main.BikeParameters.SaddlePos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saddle_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OperationRun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Main.Study.InverseDynamics&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Main.Study.Output.Pmet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Main.Study.Output.Abscissa.t&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyPyProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_macro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objfun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;designvars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Calculate the objective function value&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;saddle_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;designvars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;saddle_pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;designvars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saddle_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saddle_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ERROR&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed to run model&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pmet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trapz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Pmet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Abscissa.t&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pmet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;seat_distance_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;designvars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Compute contraint value which must be larger than zero&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;designvars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;designvars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.66&lt;/span&gt;


    &lt;span class=&quot;n&quot;&gt;constaints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ineq&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fun&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seat_distance_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;initial_guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;objfun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial_guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constaints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SLSQP&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;breaking-down-the-sections&quot;&gt;Breaking down the sections&lt;/h2&gt;

&lt;p&gt;To elaborate a little on the sections, the first part defines the &lt;code&gt;run_model&lt;/code&gt;
function. This function takes in two arguments and assigns them to the
saddleheight and saddleposition in the AMS model. The function returns the
&lt;code&gt;Pmet&lt;/code&gt; value for each timestep in the model.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Details and advanced options of this function and it’s components can be found in the &lt;a href=&quot;https://anybody-research-group.github.io/anypytools-docs/&quot;&gt;AnyPyTools documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second part defines the objective function in question. This function takes in a
list of design variable arguments and utilizes the &lt;code&gt;run_model&lt;/code&gt; function,
afterwards it integrates the &lt;code&gt;Pmet&lt;/code&gt; over the whole time series and returns the
result.&lt;/p&gt;

&lt;p&gt;Next up, the constraints and bounds are defined. For this example only a
seat distance constraint is present. The bounds for each of the design
variables is defined in the &lt;code&gt;bounds&lt;/code&gt; variable. Lastly, the optimization process is
performed, and here it envokes the &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/optimize.minimize-slsqp.html#optimize-minimize-slsqp&quot;&gt;SLSQP&lt;/a&gt;
algorithm.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For more details and examples of the capabilities of the
&lt;code&gt;Scipy.optimize&lt;/code&gt;package, follow this
&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html&quot;&gt;link.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there we have it. A full optimization of a AMS model, and a easy template to
build other and more advanced optimization processes upon.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;Try it now:&lt;/strong&gt; Make sure to try out the full AMS tutorial
&lt;a href=&quot;https://anyscript.org/tutorials/Parameter_studies_and_optimization/index.html&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is hosted on GitHub, feel free to provide feedback &lt;a href=&quot;https://github.com/AnyBody/anyscript&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;</content><author><name>Bjørn Keller Jensen</name><email>bkje14@student.aau.dk</email></author><category term="python" /><category term="Optimization" /><summary type="html">The ability to create and run mathematical optimization problems, using third party software is a valuable tool.</summary></entry><entry><title type="html">Calculating maximum model strength</title><link href="https://anyscript.org/tools/estimating-maximum-model-strength/" rel="alternate" type="text/html" title="Calculating maximum model strength" /><published>2018-09-14T00:00:00+02:00</published><updated>2018-09-14T00:00:00+02:00</updated><id>https://anyscript.org/tools/estimating-maximum-model-strength</id><content type="html" xml:base="https://anyscript.org/tools/estimating-maximum-model-strength/">&lt;p&gt;When working with subject specific scaling of models, it can be a
valuable tool to know what the strength of your model is for a given
posture. With strength we mean the maximum permissible load that the model can carry in a given posture.
This post will show you a way of calculating the maximum
strength of a simple 2D arm model in various postures. The concepts
presented can of course be extended to models involving the full body
model or parts of it.&lt;/p&gt;

&lt;figure class=&quot;align-right&quot; style=&quot;width: 300px&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/max-strength_simple-arm.png&quot; alt=&quot;Model of a simple arm&quot; /&gt;
  &lt;figcaption&gt;Fig. 1: The simple 2D arm model used in this example.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For us to do so, we first need to setup an example model. The model is a 2D arm
model comprised of an upper and lower arm segment, attached with 8 simple
muscles (fig. 1). The model is constraint to only allow movement in the global x
and y direction. This allows us to impose movements which resembles flexion and
extension of the shoulder and elbow joint. Further, we want to show a general
way of calculating the strength independent of the movement, we therefore set up
four load scenarios to mimic a flexion, extension, push, and pull movement.&lt;/p&gt;

&lt;p&gt;Since we want to investigate &lt;em&gt;maximum strength&lt;/em&gt;, we need to be sure that the
muscles are recruited appropriately. This is done by switching to the
&lt;code&gt;MinMax_Strict&lt;/code&gt; muscle recruiter in the study section of our model. For more
information on muscle recruitment in the Anybody Modelling software, se &lt;a href=&quot;https://anyscript.org/tutorials/MuscleRecruitment/index.html&quot;&gt;this
tutorial.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step in finding the default maximum strength for a posture, is to know
the relationship between load and &lt;code&gt;MaxMuscleActivity&lt;/code&gt; ( $m_{act}$ ). We
can do this by implementing a parameter study to investigate the $mmact$ across
a spectrum of loads. This is done using the &lt;code&gt;AnyParamStudy&lt;/code&gt; class as seen below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;AnyParamStudy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StrengthEval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Analysis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArmStudy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InverseDynamics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;nStep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;AnyDesVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArmModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dumbbell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;AnyDesMeasure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArmStudy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxAct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This study runs our model through the loads defined in the $load$ variable. So, in this
example it does 100 steps where it starts at 0 N and stops at 250 N. This
enables us to plot the $m_{act}$ as a function of the load. By running the parameter
study for all four load scenarios we end up with a graph as seen in fig. 2.&lt;/p&gt;

&lt;figure style=&quot;width: 80%&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/Concentric_paramStudy.png&quot; alt=&quot;Max activity as function of load&quot; /&gt;
  &lt;figcaption&gt;Fig. 2: Max muscle activity as a function of the applied load. Dashed line indicate $mmact = 1$.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We can see that for very low loads there might be other factors than the applied load
affecting the relationship. If we dwell by this fact and wonder why this
could be, we could infer that the influence of gravity and segment mass
could interfere with the relationship between $load$ and $m_{act}$. This means
that when applying low external loads, the important factor in $m_{act}$ is
the mass of the moved segments, and the gravity imposed on those
segments.&lt;/p&gt;

&lt;p&gt;The graphs on fig. 2 also tells us that for high loads there is a linear
relationship between load and $m_{act}$, and the linear part is crossing
$m_{act} = 1$ for all scenarios. We can use this information to
calculate the maximum strength of the model. If we look at the equation
for a linear function it looks like this:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:1} m_{act}  = a * load + \ b \end{equation}&lt;/script&gt;

&lt;p&gt;Where $a$ is the slope of the function, and $b$ is the intercept with the y-axis.
The slope of the linear part can be calculated using only two points and applying the
equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:2} a = \frac{(m_{act_{2}} - m_{act_{1}})}{(load_{2} - load_{1})} \end{equation}&lt;/script&gt;

&lt;p&gt;Now that we know the coordinates of two points and the slope, we can
start figuring out what the load is for an activity of 1 ( $m_{act} = 1$ ). For this
we again look at equation $\ref{eq:2}$, only this time we know the slope, the point
$(load_{1},m_{act_{1}})$, and the $m_{act}$ coordinate,
which should be equal to 1. We are therefore interested in finding the corresponding
$load_{max}$. We rearrange equation $\ref{eq:2}$, into:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation} \label{eq:3} load_{max} = \frac{1}{a} - \frac{m_{act_{1}}}{a} + load_{1} \end{equation}&lt;/script&gt;

&lt;p&gt;This allows us to evaluate what the maximum load $load_{max}$ is, that
the model can support for a given posture. To check our results, we can
calculate the maximum strength for our four scenarios using equation $\ref{eq:3}$ and try to implement the output load in our models. Table 1. shows the calculated strengths of the models, and the $m_{act}$ when applying the $load_{max}$ values.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Movement&lt;/th&gt;
      &lt;th&gt;$Load_{max}$ (N)&lt;/th&gt;
      &lt;th&gt;New $m_{act}$&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Extension&lt;/td&gt;
      &lt;td&gt;70.97891372&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flexion&lt;/td&gt;
      &lt;td&gt;78.33099967&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Push&lt;/td&gt;
      &lt;td&gt;93.43104145&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pull&lt;/td&gt;
      &lt;td&gt;113.1664796&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p class=&quot;notice&quot;&gt;Table 1: Calculated $load_{max}$ and new $m_{act}$ for each movement.&lt;/p&gt;

&lt;p&gt;Now we can calculate the maximum load for any given posture!&lt;/p&gt;

&lt;h3 id=&quot;find-the-code-on-github&quot;&gt;Find the code on GitHub&lt;/h3&gt;

&lt;p&gt;The AnyScript example which shows the concept of finding the maximum
strength is available &lt;a href=&quot;https://github.com/AnyBody/Calculating-maximum-model-strength&quot;&gt;on
GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name>Bjørn Keller Jensen</name><email>bkje14@student.aau.dk</email></author><category term="strength" /><category term="muscle" /><summary type="html">Knowing the maximum strength of a model is valuable information. In this post we show how this can be calculated easily.</summary></entry><entry><title type="html">Body Model Configuration App</title><link href="https://anyscript.org/tools/body-model-configurator/" rel="alternate" type="text/html" title="Body Model Configuration App" /><published>2018-06-20T00:00:00+02:00</published><updated>2018-06-20T00:00:00+02:00</updated><id>https://anyscript.org/tools/body-model-configurator</id><content type="html" xml:base="https://anyscript.org/tools/body-model-configurator/">&lt;p&gt;One of the first things I did when starting to use the AnyBody Modeling
System, was to understand how to configure the human model. This means enabling and disabling different body parts and setting up the available options for muscles, ligaments
etc. The model is configured via AnyScript by defining switches
which we call Body Model (BM) statements.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_ARM_RIGHT&lt;/span&gt; &lt;span class=&quot;x x-Options&quot;&gt;ON&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wouldn’t it be nice to configure the model by having some buttons and
instantaneous visual feedback as well? That is what I thought! Therefore, I have
developed a software which provides a graphical user interface (GUI) for configuring the
Body Model, called BM-Plugin. By using it, you will be able to configure your human model in a more friendly manner but without trying to give up the
flexibility of AnyScript.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_bmdemo.gif&quot; alt=&quot;BM_Plugin_Demo&quot; /&gt;

  &lt;figcaption&gt;BM Plugin: gives you the ability to visually configure the Body Model.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;BM-Plugin has in target both beginner and advanced AMS users. If you have little to no experience using
AnyScript, the BM Plugin will help you a lot in getting started with it and to understand how switches and BM statements work. 
If you are an advanced AMS user, you will find configuring your human model much easier and much faster by using the plugin. And don’t worry
about loosing your freedom with AnyScript! BM Plugin is not meant to replace it, it is meant to write it for you, so it saves you time.&lt;/p&gt;

&lt;p&gt;In the remainder of this post I will show you what the plugin is able of doing and some technicalities.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-and-use-bm-plugin&quot;&gt;How to get and use BM-Plugin&lt;/h2&gt;

&lt;p&gt;BM-Plugin comes integrated with AMMR v2.2(???) and it is available to use in AMS starting with version v7.2(???). All you have to do is to make sure that
you have these versions or later available on your computer. You can find more information about how to get the latest AMMR 
&lt;a href=&quot;https://anyscript.org/getting-started/&quot;&gt;here&lt;/a&gt;. Once you have everything ready,
load your model containing the &lt;code&gt;HumanModel&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;ANYBODY_PATH_BODY&amp;gt;/HumanModel.any&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and if everything is fine, you should be able to start the BM-Plugin by clicking the button marked in the figure below:&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_image1.png&quot; alt=&quot;BM_Plugin_1&quot; /&gt;

  &lt;figcaption&gt;Load your model and start the plugin by only clicking a button.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;using-bm-plugin&quot;&gt;Using BM-Plugin&lt;/h2&gt;

&lt;p&gt;The BM-Plugin is structured in a number of tabs, each of them giving you options
to adjust the configuration of different body parts while providing visual
feedback if available. These tabs are: &lt;code&gt;Body&lt;/code&gt;, &lt;code&gt;Legs&lt;/code&gt;, &lt;code&gt;Arms&lt;/code&gt;, &lt;code&gt;Trunk&lt;/code&gt; and
&lt;code&gt;Mannequin Drivers&lt;/code&gt;. Once the desired configuration is set, you can load it in
AMS by clicking &lt;code&gt;Apply&lt;/code&gt; or &lt;code&gt;OK&lt;/code&gt;. The difference is that by clicking &lt;code&gt;Apply&lt;/code&gt;
the Plugin will stay open for you to configure the model further. When &lt;code&gt;OK&lt;/code&gt; is clicked, the configuration is saved in a history file which is available in the &lt;code&gt;Apply History&lt;/code&gt; drop menu, next to the &lt;code&gt;Apply&lt;/code&gt; button. It is therefore possible to load a previous configurations of the model.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_tabs.gif&quot; alt=&quot;BM_Plugin_Tabs&quot; /&gt;

  &lt;figcaption&gt;The 'Body', 'Legs', 'Arms', 'Trunk' and 'Mannequin Drivers' tabs.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Of course, not all BM statements have a visual representation in the AMS Model View or are directly related to physical body parts. Therefore, the BM statements which were not classified in the tabs mentioned before can be found and modified in the &lt;code&gt;Advanced&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;By having the presented overview of the Plugin, you should be ready to use it now. However, if you are interested in finding some details about how it works behind scenes the too, continue reading.&lt;/p&gt;

&lt;h2 id=&quot;how-bm-plugin-works&quot;&gt;How BM-Plugin works&lt;/h2&gt;

&lt;p&gt;As stated in the introduction, the BM-Plugin is dependent on the &lt;code&gt;HumanModel&lt;/code&gt;. Therefore, every time you start the plugin, it will check your &lt;code&gt;.main.any&lt;/code&gt; file to determine if it is included. If it is, the Plugin will create a new file named &lt;code&gt;BodyModelConfiguration.any&lt;/code&gt; inside the &lt;code&gt;Model&lt;/code&gt; folder next to your &lt;code&gt;.main.any&lt;/code&gt; file. The plugin will then ask you if you allow it to include this file inside the main file (I recommend that you do):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Model/BodyModelConfiguration.any&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The plugin will store and modify all the needed BM statements for your model inside the &lt;code&gt;BodyModelConfiguration.any&lt;/code&gt; file. I encourage you to use this file to store the BM statements regardless if you use the plugin frequently or not. You will also find that most of the examples using the &lt;code&gt;HumanModel&lt;/code&gt; have this structure implemented and they are ready to be configured using the BM-Plugin.&lt;/p&gt;

&lt;p&gt;The Configuration file can be seen inside the plugin under the &lt;code&gt;Script File&lt;/code&gt; tab:&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/bm_config_script.png&quot; alt=&quot;BM_Plugin_Script&quot; /&gt;

  &lt;figcaption&gt;The `Script File` tab.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now I think you know enough about the plugin to try it yourself, so what are you waiting for?&lt;/p&gt;

&lt;p&gt;Any development suggestions and feedback are more than welcomed!&lt;/p&gt;</content><author><name>Ioan-Matei Sarivan</name></author><category term="Model configuration" /><category term="BM switches" /><summary type="html">This introduces a python application to help configure your model.</summary></entry><entry><title type="html">AMMR now has a DOI</title><link href="https://anyscript.org/news/DOI/" rel="alternate" type="text/html" title="AMMR now has a DOI" /><published>2018-06-15T00:00:00+02:00</published><updated>2018-06-15T00:00:00+02:00</updated><id>https://anyscript.org/news/DOI</id><content type="html" xml:base="https://anyscript.org/news/DOI/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_object_identifier&quot;&gt;Digital Object Identifiers&lt;/a&gt; (DOIs) are
the foundation of references and metrics in the world of academia. With the release
of AMMR 2.1.1 we have also added a DOI to the AnyBody Managed Model Repository (AMMR):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://doi.org/10.5281/zenodo.1250764&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.1250764.svg&quot; alt=&quot;DOI&quot; /&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The DOI for the AMMR are issues by &lt;a href=&quot;http://about.zenodo.org/&quot;&gt;Zenodo&lt;/a&gt;, which is
an European Open Science platform hosted at &lt;a href=&quot;https://home.cern/&quot;&gt;CERN&lt;/a&gt;. If you click the link above you will be directed to the side shown below.&lt;/p&gt;

&lt;figure&gt;
  
&lt;a href=&quot;https://zenodo.org/record/1287730&quot;&gt;&lt;img src=&quot;/assets/images/posts/doi_ammr_zendo.png&quot; alt=&quot;AMMR on Zenodo&quot; /&gt;&lt;/a&gt;

  &lt;figcaption&gt;
The AMMR record on Zenodo
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;archived-versions&quot;&gt;Archived versions&lt;/h3&gt;

&lt;p&gt;The DOI above always links to the newest version of the AMMR. That is called a
 concept DOI, and is useful if you want to cite all version of the AMMR.
 However, the AMMR is updated regularly, and we would often like to cite a
 specific version of the AMMR. Luckily, Zenodo &lt;a href=&quot;http://blog.zenodo.org/2017/05/30/doi-versioning-launched/&quot;&gt;supports DOI versioning&lt;/a&gt;, and
 every version of the AMMR has their own DOI.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;th&gt;DOI&lt;/th&gt;
      &lt;th&gt;ReleaseData&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;All versions&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.125076&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-2.1.1&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.1287730&lt;/td&gt;
      &lt;td&gt;June 12, 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-2.1.0&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.125127&lt;/td&gt;
      &lt;td&gt;March 25, 2018&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-2.0.0&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.1251274&lt;/td&gt;
      &lt;td&gt;November 30, 2017&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMMR-1.6.6&lt;/td&gt;
      &lt;td&gt;10.5281/zenodo.1250765&lt;/td&gt;
      &lt;td&gt;March 13, 2017&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;See also:&lt;/strong&gt; The complete &lt;a href=&quot;https://zenodo.org/search?page=1&amp;amp;size=20&amp;amp;q=conceptrecid:%221250764%22&amp;amp;sort=-publication_date&amp;amp;all_versions=True&quot;&gt;list of releases on Zenodo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once a DOI is created &lt;a href=&quot;http://about.zenodo.org/&quot;&gt;Zenodo&lt;/a&gt; also
archives all the associated files to ensure data is never changed or lost. This effectively means that you can now also
download all &lt;a href=&quot;https://zenodo.org/record/1287730&quot;&gt;archived versions of the AMMR&lt;/a&gt;
directly from Zenodo.&lt;/p&gt;

&lt;h3 id=&quot;citing-the-ammr&quot;&gt;Citing the AMMR&lt;/h3&gt;

&lt;p&gt;DOI’s will also help you cite the AMMR and specify exactly which version the AMMR you use. This is really important for scientific publications so other can reproduce your results. The DOI ensures that others can be confident that they get the exact version of the AMMR that you
used. Once a DOI is minted the underlying files can’t be changed. So DOIs are
also essential for traceability.&lt;/p&gt;

&lt;p&gt;Zenodo will even generate the correct citation style for all journals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/doi_cite.png&quot; alt=&quot;Different citation styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of how to cite the AMMR v.2.1.1 for Journal of Biomechanics:&lt;/p&gt;

&lt;div class=&quot;notice--success&quot;&gt;
  &lt;h4&gt;How to cite:&lt;/h4&gt;
  
&lt;p&gt;Morten Enemark Lund, Søren Tørholm, &amp;amp; Moonki Jung. (2018, June 12). The AnyBody Managed Model Repository (AMMR) (Version 2.1.1). Zenodo. http://doi.org/10.5281/zenodo.1287730&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;more-research-output&quot;&gt;More research output&lt;/h3&gt;

&lt;p&gt;You can find more research output from AnyBody Technology on the &lt;a href=&quot;https://zenodo.org/communities/anybody&quot;&gt;AnyBodyTech Zenodo community page&lt;/a&gt;.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="AMMR" /><category term="Models" /><summary type="html">We have added a DOI for the AMMR repository. This will help user users communicate which version of the AMMR they are using, and make it easy to cite the AMMR.</summary></entry><entry><title type="html">What is new AMMR 2.0</title><link href="https://anyscript.org/news/ammr-2.0/" rel="alternate" type="text/html" title="What is new AMMR 2.0" /><published>2017-11-29T00:00:00+01:00</published><updated>2017-11-29T00:00:00+01:00</updated><id>https://anyscript.org/news/ammr-2.0</id><content type="html" xml:base="https://anyscript.org/news/ammr-2.0/">&lt;p&gt;Join us for the launch of version 7.1 of our musculoskeletal simulation software - The AnyBody Modeling System, and a new version of the AnyBody Model repository (AMMR 2.0).&lt;/p&gt;

&lt;p&gt;In this webcast, Morten Enemark Lund, R&amp;amp;D Engineer at AnyBody Technology, will the new software features and the exciting new model repository which is shipped with version 7.1.&lt;/p&gt;

&lt;p&gt;THe features include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;New lower extremity model (TLEM2.1)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New framework for MoCap models (AnyMoCap)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New Manidble model&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;New calibration scheme&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Numerous updates to body models and example applications.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the release of the AnyBody Modeling System 7.1 update, we thought it was
time to make a post about all the improvements in the new model repository.&lt;/p&gt;

&lt;p&gt;The AnyBody Managed Model Repository (AMMR) version 2.0 marks the culmination of
a huge task to update our existing models and adding new models and examples.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_new_tutorial.png&quot; alt=&quot;New tutorials website&quot; /&gt;

  &lt;figcaption&gt;The new tutorials&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;new-ammr-documentation&quot;&gt;New AMMR documentation&lt;/h2&gt;

&lt;h2 id=&quot;new-tutorials&quot;&gt;New Tutorials&lt;/h2&gt;

&lt;h2 id=&quot;anymocap&quot;&gt;AnyMoCap&lt;/h2&gt;

&lt;h2 id=&quot;new-lower-extremity-model-version-21&quot;&gt;New Lower Extremity model (Version 2.1)&lt;/h2&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Of course we are not done. There are new model developments in the pipeline, and some of the improvements to the structure of the lower extremity model we would also like to do for the upper body.&lt;/p&gt;

&lt;h2 id=&quot;a-little-history&quot;&gt;A little history&lt;/h2&gt;

&lt;p&gt;The tutorials used to live as compiled HTML (CHM), a binary format for a
documentation system called Microsoft HTML Help. You find this kind of help
resources in many older Windows Programmers.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_old_tutorial.png&quot; alt=&quot;Old tutorials hosted as Microsoft HTML help&quot; /&gt;

  &lt;figcaption&gt;The old Tutorials served through Microsoft HTML help&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Today it may look old fashioned, but it was the best choice for distributing
documentation in 2003 when the first version of AnyBody emerged.&lt;/p&gt;

&lt;p&gt;Microsoft has since discontinued the HTML Help system. Today there are much
better options for software documentation which makes it easier to both use the
tutorials and maintain them.&lt;/p&gt;

&lt;h2 id=&quot;sphinx-for-software-documentation&quot;&gt;Sphinx for software documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; is a tool for generating software
documentation. The Python community originally developed it for creating the
documentation for the Python programming language. Today it is widely used in
many different domains. The Linux community recently (2016) chose Sphinx as the
new documentation system for the Linux kernel. Sphinx is well maintained and
actively developed, and very easy to use.&lt;/p&gt;

&lt;p&gt;Sphinx converts reStructuredText files into HTML, pdf, epub or other formats.
reStructuredText is simply plain text files with extra simple markup to define
headers and other types of formatting.&lt;/p&gt;

&lt;p&gt;A reStructuredText file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Lesson 2: Advanced Concepts
===========================

Open the model from lesson 1 and change the following lines:

.. code-block:: AnyScript

    InverseDynamics.Criterion = {
      Type = §MR_Polynomial§;
    };

Now we have specified polynomial muscle recruitment, which 
comes down to the following objective function:

.. math:: G = \sum_{i} \left( \frac{f_i}{N_i} \right)^p

We have not, however, specified what the power *p* is. In the
absence of a specification, AnyBody assumes *p* = 3, If we 
reload and rerun the model now, we get the following result:

.. figure:: _static/lesson2/chart1.png
   :scale: 50 %
   
   Results with 5 order Polynomial muscle criterion.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the tutorials as plain text, may at first seem like a disadvantage. The
AnyBody tutorials are currently stored as Word documents. But reStructuredText
has many advantages as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better control of formatting and style&lt;/li&gt;
  &lt;li&gt;Easier tracking of updates and changes&lt;/li&gt;
  &lt;li&gt;Pictures and images live outside the document&lt;/li&gt;
  &lt;li&gt;Makes it easier to accept contribution from users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, MS Word can still be used when writing new tutorials. The &lt;code&gt;*.docx&lt;/code&gt; file
can be converted into reStructured text using the &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;
document converter. Pandoc can convert tables, any formatting, embedded images
into reStructuredText. Pandoc even converts equations from MS Word into Latex
style formulas which work in reStructuredText files.&lt;/p&gt;

&lt;h1 id=&quot;hosting-tutorials-on-github&quot;&gt;Hosting tutorials on GitHub&lt;/h1&gt;

&lt;p&gt;The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Source files:&lt;/strong&gt; &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;https://github.com/AnyBody/anybody-tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web page:&lt;/strong&gt; &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;https://anyscript.org/tutorials/dev&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contributions are always welcome! So if you find typos, missing links or
anything else help us fix it. It is easy. Just fork &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&amp;gt;&quot;&gt;the repository on
GitHub&lt;/a&gt;, make the changes, and
issue a pull request.&lt;/p&gt;

&lt;p&gt;Every pull request is automatically tested, to ensure that Sphinx builds the
tutorials without errors. This done using &lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot;&gt;Travis
CI&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See status of the Travis CI build: &lt;a href=&quot;https://travis-ci.org/AnyBody/anybody-tutorial&quot;&gt;&lt;img src=&quot;https://travis-ci.org/AnyBody/anybody-tutorial.svg?branch=master&quot; alt=&quot;Build
Status&quot; /&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once a change is accepted and merged into the repository the script also automatically deploys the tutorial web page.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="AMMR" /><category term="Models" /><summary type="html">With the release of the AnyBody Modeling System 7.1 update, we thought it was time to make a post about all the improvements in the new model repository.</summary></entry><entry><title type="html">Getting AnyBody and Numpy to work</title><link href="https://anyscript.org/news/Numpy-and-scipy/" rel="alternate" type="text/html" title="Getting AnyBody and Numpy to work" /><published>2017-11-25T00:00:00+01:00</published><updated>2017-11-25T00:00:00+01:00</updated><id>https://anyscript.org/news/Numpy-and-scipy</id><content type="html" xml:base="https://anyscript.org/news/Numpy-and-scipy/">&lt;p&gt;With the release of the AnyBody Modeling System 7.1 update, we thought it was
time to make a post about all the improvements in the new model repository.&lt;/p&gt;

&lt;p&gt;The AnyBody Managed Model Repository (AMMR) version 2.0 marks the culmination of
a huge task to update our existing models and adding new models and examples.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_new_tutorial.png&quot; alt=&quot;New tutorials website&quot; /&gt;

  &lt;figcaption&gt;The new tutorials&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;new-ammr-documentation&quot;&gt;New AMMR documentation&lt;/h2&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt;

&lt;p&gt;Of course we are not done. There are new model developments in the pipeline, and some of the improvements to the structure of the lower extremity model we would also like to do for the upper body.&lt;/p&gt;

&lt;h2 id=&quot;a-little-history&quot;&gt;A little history&lt;/h2&gt;

&lt;p&gt;The tutorials used to live as compiled HTML (CHM), a binary format for a
documentation system called Microsoft HTML Help. You find this kind of help
resources in many older Windows Programmers.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_old_tutorial.png&quot; alt=&quot;Old tutorials hosted as Microsoft HTML help&quot; /&gt;

  &lt;figcaption&gt;The old Tutorials served through Microsoft HTML help&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Today it may look old fashioned, but it was the best choice for distributing
documentation in 2003 when the first version of AnyBody emerged.&lt;/p&gt;

&lt;p&gt;Microsoft has since discontinued the HTML Help system. Today there are much
better options for software documentation which makes it easier to both use the
tutorials and maintain them.&lt;/p&gt;

&lt;h2 id=&quot;sphinx-for-software-documentation&quot;&gt;Sphinx for software documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; is a tool for generating software
documentation. The Python community originally developed it for creating the
documentation for the Python programming language. Today it is widely used in
many different domains. The Linux community recently (2016) chose Sphinx as the
new documentation system for the Linux kernel. Sphinx is well maintained and
actively developed, and very easy to use.&lt;/p&gt;

&lt;p&gt;Sphinx converts reStructuredText files into HTML, pdf, epub or other formats.
reStructuredText is simply plain text files with extra simple markup to define
headers and other types of formatting.&lt;/p&gt;

&lt;p&gt;A reStructuredText file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Lesson 2: Advanced Concepts
===========================

Open the model from lesson 1 and change the following lines:

.. code-block:: AnyScript

    InverseDynamics.Criterion = {
      Type = §MR_Polynomial§;
    };

Now we have specified polynomial muscle recruitment, which 
comes down to the following objective function:

.. math:: G = \sum_{i} \left( \frac{f_i}{N_i} \right)^p

We have not, however, specified what the power *p* is. In the
absence of a specification, AnyBody assumes *p* = 3, If we 
reload and rerun the model now, we get the following result:

.. figure:: _static/lesson2/chart1.png
   :scale: 50 %
   
   Results with 5 order Polynomial muscle criterion.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the tutorials as plain text, may at first seem like a disadvantage. The
AnyBody tutorials are currently stored as Word documents. But reStructuredText
has many advantages as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better control of formatting and style&lt;/li&gt;
  &lt;li&gt;Easier tracking of updates and changes&lt;/li&gt;
  &lt;li&gt;Pictures and images live outside the document&lt;/li&gt;
  &lt;li&gt;Makes it easier to accept contribution from users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, MS Word can still be used when writing new tutorials. The &lt;code&gt;*.docx&lt;/code&gt; file
can be converted into reStructured text using the &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;
document converter. Pandoc can convert tables, any formatting, embedded images
into reStructuredText. Pandoc even converts equations from MS Word into Latex
style formulas which work in reStructuredText files.&lt;/p&gt;

&lt;h1 id=&quot;hosting-tutorials-on-github&quot;&gt;Hosting tutorials on GitHub&lt;/h1&gt;

&lt;p&gt;The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Source files:&lt;/strong&gt; &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;https://github.com/AnyBody/anybody-tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web page:&lt;/strong&gt; &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;https://anyscript.org/tutorials/dev&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contributions are always welcome! So if you find typos, missing links or
anything else help us fix it. It is easy. Just fork &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&amp;gt;&quot;&gt;the repository on
GitHub&lt;/a&gt;, make the changes, and
issue a pull request.&lt;/p&gt;

&lt;p&gt;Every pull request is automatically tested, to ensure that Sphinx builds the
tutorials without errors. This done using &lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot;&gt;Travis
CI&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See status of the Travis CI build: &lt;a href=&quot;https://travis-ci.org/AnyBody/anybody-tutorial&quot;&gt;&lt;img src=&quot;https://travis-ci.org/AnyBody/anybody-tutorial.svg?branch=master&quot; alt=&quot;Build
Status&quot; /&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once a change is accepted and merged into the repository the script also automatically deploys the tutorial web page.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="AMMR" /><category term="Models" /><summary type="html">In this post we will explore why it is hard to use the NumPy and Scipy packages from AnyBody.</summary></entry><entry><title type="html">Freeing the AnyBody Tutorials</title><link href="https://anyscript.org/news/freeing-the-anybody-tutorials/" rel="alternate" type="text/html" title="Freeing the AnyBody Tutorials" /><published>2017-08-14T00:00:00+02:00</published><updated>2017-08-14T00:00:00+02:00</updated><id>https://anyscript.org/news/freeing-the-anybody-tutorials</id><content type="html" xml:base="https://anyscript.org/news/freeing-the-anybody-tutorials/">&lt;p&gt;Anyone, who works with AnyBody modeling system has at one time used the AnyBody
tutorials. They are a valuable resource when learning to use the AnyBody
Modeling System and there are more than 15 different tutorials covering
everything from ‘Getting Started’ tutorials for the new users to very advanced
topics like force dependent kinematics and FEA interfaces.&lt;/p&gt;

&lt;p&gt;Today, we are releasing a new &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;web based version&lt;/a&gt; of the tutorials.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_new_tutorial.png&quot; alt=&quot;New tutorials website&quot; /&gt;

  &lt;figcaption&gt;The new tutorials&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;a-little-history&quot;&gt;A little history&lt;/h2&gt;

&lt;p&gt;The tutorials used to live as compiled HTML (CHM), a binary format for a
documentation system called Microsoft HTML Help. You find this kind of help
resources in many older Windows Programmers.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/tutorials_old_tutorial.png&quot; alt=&quot;Old tutorials hosted as Microsoft HTML help&quot; /&gt;

  &lt;figcaption&gt;The old Tutorials served through Microsoft HTML help&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Today it may look old fashioned, but it was the best choice for distributing
documentation in 2003 when the first version of AnyBody emerged.&lt;/p&gt;

&lt;p&gt;Microsoft has since discontinued the HTML Help system. Today there are much
better options for software documentation which makes it easier to both use the
tutorials and maintain them.&lt;/p&gt;

&lt;h2 id=&quot;sphinx-for-software-documentation&quot;&gt;Sphinx for software documentation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sphinx-doc.org/en/stable/&quot;&gt;Sphinx&lt;/a&gt; is a tool for generating software
documentation. The Python community originally developed it for creating the
documentation for the Python programming language. Today it is widely used in
many different domains. The Linux community recently (2016) chose Sphinx as the
new documentation system for the Linux kernel. Sphinx is well maintained and
actively developed, and very easy to use.&lt;/p&gt;

&lt;p&gt;Sphinx converts reStructuredText files into HTML, pdf, epub or other formats.
reStructuredText is simply plain text files with extra simple markup to define
headers and other types of formatting.&lt;/p&gt;

&lt;p&gt;A reStructuredText file could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Lesson 2: Advanced Concepts
===========================

Open the model from lesson 1 and change the following lines:

.. code-block:: AnyScript

    InverseDynamics.Criterion = {
      Type = §MR_Polynomial§;
    };

Now we have specified polynomial muscle recruitment, which 
comes down to the following objective function:

.. math:: G = \sum_{i} \left( \frac{f_i}{N_i} \right)^p

We have not, however, specified what the power *p* is. In the
absence of a specification, AnyBody assumes *p* = 3, If we 
reload and rerun the model now, we get the following result:

.. figure:: _static/lesson2/chart1.png
   :scale: 50 %
   
   Results with 5 order Polynomial muscle criterion.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the tutorials as plain text, may at first seem like a disadvantage. The
AnyBody tutorials are currently stored as Word documents. But reStructuredText
has many advantages as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Better control of formatting and style&lt;/li&gt;
  &lt;li&gt;Easier tracking of updates and changes&lt;/li&gt;
  &lt;li&gt;Pictures and images live outside the document&lt;/li&gt;
  &lt;li&gt;Makes it easier to accept contribution from users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, MS Word can still be used when writing new tutorials. The &lt;code&gt;*.docx&lt;/code&gt; file
can be converted into reStructured text using the &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;
document converter. Pandoc can convert tables, any formatting, embedded images
into reStructuredText. Pandoc even converts equations from MS Word into Latex
style formulas which work in reStructuredText files.&lt;/p&gt;

&lt;h1 id=&quot;hosting-tutorials-on-github&quot;&gt;Hosting tutorials on GitHub&lt;/h1&gt;

&lt;p&gt;The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Source files:&lt;/strong&gt; &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;https://github.com/AnyBody/anybody-tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Web page:&lt;/strong&gt; &lt;a href=&quot;https://anyscript.org/tutorials&quot;&gt;https://anyscript.org/tutorials/dev&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contributions are always welcome! So if you find typos, missing links or
anything else help us fix it. It is easy. Just fork &lt;a href=&quot;https://github.com/AnyBody/anybody-tutorial&quot;&gt;the repository on
GitHub&lt;/a&gt;, make the changes, and
issue a pull request.&lt;/p&gt;

&lt;p&gt;Every pull request is automatically tested, to ensure that Sphinx builds the
tutorials without errors. This done using &lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot;&gt;Travis
CI&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See status of the Travis CI build: &lt;a href=&quot;https://travis-ci.org/AnyBody/anybody-tutorial&quot;&gt;&lt;img src=&quot;https://travis-ci.org/AnyBody/anybody-tutorial.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once a change is accepted and merged into the repository the script also
automatically deploys the tutorial web page.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="Tutorials" /><category term="Sphinx" /><summary type="html">Anyone, who works with AnyBody modeling system has at one time used the the AnyBody tutorials. They are a valuable resources when learning to use the AnyBody Modeling System</summary></entry><entry><title type="html">AnyScript support in Visual Studio Code</title><link href="https://anyscript.org/editors/anyscript-in-vscode/" rel="alternate" type="text/html" title="AnyScript support in Visual Studio Code" /><published>2017-07-15T00:00:00+02:00</published><updated>2017-07-15T00:00:00+02:00</updated><id>https://anyscript.org/editors/anyscript-in-vscode</id><content type="html" xml:base="https://anyscript.org/editors/anyscript-in-vscode/">&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;(VS Code) is one of the newest text
editors to join the group of new powerful source code editors like &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;,  &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; and &lt;a href=&quot;http://brackets.io&quot;&gt;brackets&lt;/a&gt;. All of which have become extremely popular in recent years.&lt;/p&gt;

&lt;p&gt;Visual Studio Code  is currently my favorite text editor. It is cross-platform, lightweight, extensible and powerful. So of
course I want to use it when working with AnyScript. In this post I will show a new
AnyScript extension for VSCode, that does syntax highlighting, code folding,
and snippets.&lt;/p&gt;

&lt;p&gt;This is the second post in our series on using external editors for AnyScript.
&lt;a href=&quot;https://anyscript.org//editors/notepad++-and-anyscript/&quot;&gt;In the first post&lt;/a&gt;)
I showed a handy extension for &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt;,
so if you use Notepad++ check that post.&lt;/p&gt;

&lt;h2 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;/h2&gt;
&lt;p&gt;Visual Studio Code or VS Code is a source code editor developed by Microsoft for
both Windows, Linux and MacOS. It is free, open source and includes a lot of
advanced features for working with source code. It is also very customizable so 
users can change themes, keyboard shortcuts and much more.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_screenshot.png&quot; alt=&quot;VSCode&quot; /&gt;

  &lt;figcaption&gt;Screenshot from Visual Studio Code, with AnyScript syntax highlighting.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;VS code looks a little different from traditional Windows programs, but it is
easy enough to use. The simple looks deceives. VS Code has all the same features
as for example &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt;, and if you miss a certain feature VS Code has a good extension system. So the chances are
that there is a user contributed extension to help your specific need.&lt;/p&gt;

&lt;h2 id=&quot;anyscript-extension&quot;&gt;AnyScript Extension&lt;/h2&gt;
&lt;p&gt;In the screen shoot above shows a file with AnyScript syntax highlighting. Highlighting in AnyScript files works as soon as the AnyScript extension is installed. It is easy to install. Just click the extension icon at the bottom of left sidebar and
search for AnyScript. Then click install.&lt;/p&gt;

&lt;figure&gt;
  
&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_extension_install.png&quot; alt=&quot;VSCode&quot; /&gt;

  &lt;figcaption&gt;Installing the AnyScript extension.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;syntax-highlighting-and-code-folding&quot;&gt;Syntax highlighting and code folding&lt;/h3&gt;

&lt;p&gt;Once the extension is installed the all AnyScript files will have highlighting.&lt;/p&gt;

&lt;p&gt;THe plugin also gives you code folding, which allows you to collapse classes and
folders. A feature which is really handy when working on large files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_folding.png&quot; alt=&quot;VSCode code folding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VS hCode supports code snippets which are templates that makes it easier to write
repeating code patterns. This part isn’t fully supported by the extension yet.
But I have added few snippets for the following classes and functions:
&lt;code&gt;AnyDrawRefFrame&lt;/code&gt;, &lt;code&gt;AnyRefNode&lt;/code&gt;, &lt;code&gt;RotMat&lt;/code&gt;, &lt;code&gt;AnyFunConst&lt;/code&gt;,  &lt;code&gt;AnyFolder&lt;/code&gt;,
&lt;code&gt;AnyKinMeasureOrg&lt;/code&gt;, &lt;code&gt;AnyKinRotational&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The snippet inserter is activated by pressing &lt;code&gt;ctrl-shift-P&lt;/code&gt; and then writing
&lt;code&gt;insert snippet&lt;/code&gt;. Note: you need to be in a AnyScript file to get the AnyScript
snippets.&lt;/p&gt;

&lt;p&gt;Snippets can also be inserted using the tab completer. So if you start to type
the name of the class e.g. &lt;code&gt;AnyDrawRe&lt;/code&gt; and press tab the snippet is inserted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://anyscript.org/assets/images/posts/vscode_snippets.gif&quot; alt=&quot;VSCode code folding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The snippets are just meant as a test, but hopefully we can have snippets for all the AnyScript classes in the future.&lt;/p&gt;

&lt;h3 id=&quot;help-make-the-extension-better&quot;&gt;Help make the extension better&lt;/h3&gt;

&lt;p&gt;Here is an link to page where the extension live:
https://github.com/AnyBody/vscode-anyscript. Any improvements and help is most
appreciated.&lt;/p&gt;</content><author><name>Morten Enemark Lund</name></author><category term="Syntax highlighting" /><category term="Visual Studio Code" /><summary type="html">Visual Studio Code is currently my favorite editor, so it natural that it should also support AnyScript.</summary></entry><entry><title type="html">Add limits to the Range of Motion</title><link href="https://anyscript.org/tools/rom-limits/" rel="alternate" type="text/html" title="Add limits to the Range of Motion" /><published>2017-05-04T00:00:00+02:00</published><updated>2017-05-04T00:00:00+02:00</updated><id>https://anyscript.org/tools/rom-limits</id><content type="html" xml:base="https://anyscript.org/tools/rom-limits/">&lt;p&gt;In this post, I will show a new AnyScript class template to add range-of-motion
limits to Human body model.&lt;/p&gt;

&lt;p&gt;The implementation consist of two AnyScript class templates. A high
level class template &lt;code&gt;RangeOfMotionLimits&lt;/code&gt; which makes it easy to add
Range-of-motion limits to all the joints on the Musculoskeltal model.&lt;/p&gt;

&lt;p&gt;Behind the scenes the high-level template uses a more generic low-leve template
&lt;code&gt;KinLimitsDriver&lt;/code&gt;, which can add limits to any kinematic measure.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage:&lt;/h2&gt;

&lt;p&gt;To use the high level class template &lt;code&gt;RangeOfMotionLimits&lt;/code&gt; you must first 
include the file in which it is defined.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;#include &quot;../path/to/RangeOfMotionLimits_template.any&quot;&lt;/code&gt; in the beginning
of your main file. Then create the &lt;code&gt;RangeOfMotionLimits&lt;/code&gt; class inside Main after 
the human model is included in the model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;../path/to/RangeOfMotionLimits_template.any&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// It is important that the human model is include&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// before the JointLimit template. This is to ensure&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// that all BM statements are defined.&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;ANYBODY_PATH_BODY&amp;gt;/HumanModel.any&amp;quot;&lt;/span&gt;


  &lt;span class=&quot;n&quot;&gt;RangeOfMotionLimits&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROM_Limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ARM_RIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_ARM_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ARM_LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_ARM_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LEG_RIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_LEG_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LEG_LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x x-Statements&quot;&gt;BM_LEG_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TRUNK_NECK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BM_TRUNK_NECK&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Example of changing af few of the limits&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Trunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PelvisThoraxExtension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Limits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElbowPronation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If some joint should not have range of motion limits, the class accepts
arguments for disabling individual joint limits:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-anyscriptdoc&quot; data-lang=&quot;anyscriptdoc&quot;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;RangeOfMotionLimits&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoMLimits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PELVIS_THORAX_LATERAL_BENDING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Off&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;find-the-code-on-github&quot;&gt;Find the code on GitHub&lt;/h3&gt;

&lt;p&gt;The AnyScript template is &lt;a href=&quot;https://github.com/AnyBody/range-of-motion-limits&quot;&gt;hosted on GitHub&lt;/a&gt;,
where you can find examples and documentation on the
&lt;code&gt;class_template&lt;/code&gt; and the options which are available.&lt;/p&gt;</content><author><name>Søren Tørholm, PhD</name></author><category term="kinematics" /><category term="joints" /><summary type="html">In this post you will see how to add range-of-motion limits to your simulations.</summary></entry></feed>