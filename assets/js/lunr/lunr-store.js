var store = [{
        "title": "Our new AnyScript landing page",
        "excerpt":"We are building a replacement for the old AnyScript.org page. The site is currently not active but the work is ongoing.                                                                                      Old and new AnyScript.org site       The new site links to the new version of the repository site and the wiki site, which are both hosted on GitHub.  ","categories": ["News"],
        "tags": ["web site"],
        "url": "https://anyscript.org/news/new-anyscript-site/",
        "teaser":"https://anyscript.org/assets/images/teaser.jpg"},{
        "title": "Useful AnyScript Macros",
        "excerpt":"AnyBody makes it easy to do musculoskeletal modelling, but some tasks which are simple in  normal programming languages (i.e. C, Matlab, Python) can be hard to accomplish in AnyScript.  This could be simple tasks like:      Creating an abitrary matrix of zeros   Adding a constant to single row in a matrix   Change a single value in matrix   Thresholding a vector   These are all easy with traditional programming constructs like for-loops and if-else clauses etc.   The reason that such tasks are hard is that AnyScript is not a traditional programming language.  For-loops and sequential algorithms are not allowed because AnyScript is a modelling language  (or a declarative language). That is in contrast to most other programming languages which are  imperative (i.e., implements a sequence of commands). This distinction can sometimes be hard for  new users to grasp. But keep in mind that the declarative nature of AnyScript is also what makes  AnyBody so compelling.   Notice! Although it is not the topic of this blog post, it is possible to call external C or Python functions to do stuff which is otherwise impossible in AnyScript.   Creating a NxM matrix   However, with a little ingenuity, many things can also be accomplished directly in AnyScript. For example, let us create a to create a MxN matrix of zeros using the matrix product of two vectors.           First, we create two vectors of length M and N with the iarr() function       AnyInt M = 3; AnyInt N = 4; AnyVar v1 = iarr(1, M); // {1,2,3} AnyVar v2 = iarr(1, N); // {1,2,3,4}             Then we take the matrix product of the vectors to create a matrix.       AnyVar Mat = v1'*{v1}; // {{1,2,3,4},{2,4,6,8},{3,6,9,12}}         Here we have to tranpose v1 to make a 3x1 column maxtrix, and wrap v2 in an extra brace to make it an 1x4 row matrix. Their product is then a 4x3 matrix.            Finally, we can multiply it with zero to make zero matrix       AnyVar zeromat = Mat*0.0; // {{0,0,0,0},{0,0,0,0},{0,0,0,0}}        Using workarounds like this can make the code very unreadable. Luckily, we can wrap the expression in a code macro and reuse it like a small function.   Code macros   Code macros in AnyScript are exactly as in C and C++. They make complex expresions easier to reuse and read. The syntax is also very similar.   #define ZEROS(M,N) (0.0*iarr(1,M)'*{iarr(1,N)})  AnyVar mat = 3 + ZEROS(3,3);   // {{3,3,3},{3,3,3},{3,3,3}}     The ZEROS() function is arguably something that should have been a built-in function of AnyScript ( And maybe it will be soon )   Here is a summery of myfavorite code macros that make it easiser to work with AnyBody.  You can find their implementatin further down:                  Macro       Description                       ZEROS(M,N)       MxN zero matrix                 ONES(M,N)       MxN ones matrix                 EYE(M)       Square identity matrix                 REPVEC(V,N)       Repeats a vector or matrix along the second dimension                 ONES_J(M,N,J)       Matrix with ones in j’th coloumn and zero else where                 ONES_I(M,N,I)       Matrix with ones in I’th coloumn and zero else where                 ONES_IJ(M,N,I,J)       Mmatrix with a one in the i,j element zeros else where                 SMOOTHERSTEP(edge0, edge1, val)       Smooth step function from 0.0 at edge0 to 1.0 at edge1. The function has first and second derivatives equal to zero at the edge values. val can be both a sigal value or vector.           Notice! All the examples shown here are designed to work with AnyBody version 6.1.   The helper macros include file   All the macros are defined in the file below. Just download the file and include it in your application:   #include \"helper_macros.any\"   Also, the file is hosted as a Gist on GitHub. So feel free to contribute if you have more useful AnyScript macros.   // This file contains usefull macro functions for the AnyBody Modeling system.  #ifndef _HELPER_MACORS_ANY_ #define _HELPER_MACORS_ANY_  // Running number to compare file versions. #define _HELPER_MACORS_ANY_VERSION 3   // Inline implemention of an MxN zero matrix #define ZEROS(M,N) reshape(0.0*iarr(0,(M)*(N)-1),{M,N})  // Inline implemention of an MxN ones matrix #define ONES(M,N) (1+reshape(0.0*iarr(0,(M)*(N)-1),{M,N}))  // Inline implemention of an square identity matrix #define EYE(M) eqfun(floor(div(1.0*reshape(iarr(0,round((M)^2-1)),{M,M}),(M)+1)),div(1.0*reshape(iarr(0,round((M)^2-1)),{M,M}),(M)+1))  // Repeats a vector or matrix along the second dimension // REPVEC({1,2,3},2)  : {{1,2,3},{1,2,3}} // REPVEC({1,2,3},2)&#39; : {{1,1},{2,2},{3,3}} #define REPVEC(V,N) (ONES(N,1)*{flatten(V)})  // Inline implementation of matrix with ones in j&#39;th coloumn and zero else where  #define ONES_J(M,N,J)  eqfun((1+0.0*iarr(0, M)&#39;)*{iarr(0,N)},J)   // Inline implementation of matrix with ones in i&#39;th row and zeros else where  #define ONES_I(M,N,I)  (eqfun((1+0.0*iarr(0, N)&#39;)*{iarr(0,M)},I)&#39;) //&#39;  // Inline implementation of matrix with a one in the i,j element zeros else where  #define ONES_IJ(M,N,I,J) eqfun(reshape(iarr(0,floor((M)*(N)-1.0)),{floor(1.0*M),floor(1.0*N)}),floor(1.0*(I*(N))+(J)))  // Simple linspace implementatation #define _LINSPACE(START, STOP, NUM) iarr(0, floor(1.0*(NUM-1)))*(1.0*(STOP)-1.0*(START))/(floor(1.0*(NUM))-1)+START  // Linspace which ensures that the last point is exactly STOP. #define LINSPACE(START, STOP, NUM ) mult(not(ONES_IJ(1, NUM, 0, NUM-1)[0]), _LINSPACE(START, STOP, NUM))+ ONES_IJ(1, NUM, 0, NUM-1)[0]*STOP   /* // Inline AnyScript implementation of the following C++ function:  // https://en.wikipedia.org/wiki/Smoothstep float smootherstep(float edge0, float edge1, float x) {     // Scale, and clamp x to 0..1 range     x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);     // Evaluate polynomial     return x*x*x*(x*(x*6 - 15) + 10); } */ // 1st and 2nd order derivatives at edge0 and edge1 are 0 #define SMOOTHERSTEP(edge0, edge1, val) mult(iffun(ltfun(((val)-(edge0))/((edge1)-(edge0)),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/((edge1)-(edge0)),1.0),0*(val)+1.0, ((val)-(edge0))/((edge1)-(edge0))))\\                                        ,mult(iffun(ltfun(((val)-(edge0))/((edge1)-(edge0)),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/((edge1)-(edge0)),1.0),0*(val)+1.0, ((val)-(edge0))/((edge1)-(edge0))))\\                                        ,mult(iffun(ltfun(((val)-(edge0))/((edge1)-(edge0)),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/((edge1)-(edge0)),1.0),0*(val)+1.0, ((val)-(edge0))/((edge1)-(edge0))))\\                                        ,(mult(iffun(ltfun(((val)-(edge0))/((edge1)-(edge0)),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/((edge1)-(edge0)),1.0),0*(val)+1.0, ((val)-(edge0))/((edge1)-(edge0))))\\                                        ,(iffun(ltfun(((val)-(edge0))/((edge1)-(edge0)),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/((edge1)-(edge0)),1.0),0*(val)+1.0, ((val)-(edge0))/((edge1)-(edge0))))\\                                         *6 - 15)) + 10)  )))                                                                                        /* // Inline AnyScript implementation of the following c++ function.  This is just half a smoother step function which continues liniearly when it reaches it steepest value. float smoothramp(float edge0, float edge1, float x) {     // Scale, and clamp x to 0..1 range     x = clamp((x - edge0)/(2*(edge1 - edge0)), 0.0, 0.5);     // Evaluate polynomial     if (x &lt; 0.5) {       return x*x*x*(x*(x*6 - 15) + 10)     }     else {       return 2*x - 0.5     }; }; */  // 1st and 2nd order derivatives at edge0 are 0 #define SMOOTHRAMP(edge0, edge1, val) 2*iffun(gtfun(((val)-(edge0))/(2*((edge1)-(edge0))), 0.5), -0.5+2*(((val)-(edge0))/(2*((edge1)-(edge0)))),\\                                         mult(iffun(ltfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.5),0*(val)+0.5, ((val)-(edge0))/(2*((edge1)-(edge0)))))\\                                        ,mult(iffun(ltfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.5),0*(val)+0.5, ((val)-(edge0))/(2*((edge1)-(edge0)))))\\                                        ,mult(iffun(ltfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.5),0*(val)+0.5, ((val)-(edge0))/(2*((edge1)-(edge0)))))\\                                        ,(mult(iffun(ltfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.5),0*(val)+0.5, ((val)-(edge0))/(2*((edge1)-(edge0)))))\\                                        ,(iffun(ltfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.0), 0*(val), iffun(gtfun(((val)-(edge0))/(2*((edge1)-(edge0))),0.5),0*(val)+0.5, ((val)-(edge0))/(2*((edge1)-(edge0)))))\\                                         *6 - 15)) + 10) )))\\                                        )                                             #if ANYBODY_FILENAME_MAINFILE == &quot;helper_macros.any&quot; //  Test code. Only active if the file is loaded as main Main =  {      AnyFolder StepFunctions = {     // Run the function on a vector input     AnyVector x_test = farr(-1.0, 0.1, 100);     AnyVector y_test = SMOOTHERSTEP(0, 3, x_test);          AnyBodyStudy test_study =      {       Gravity = {0,0,0};       // Run the function on single values as part of a study.       AnyVar SmootherStep = SMOOTHERSTEP(0.25, 0.75, t);               AnyVar SmootherRamp= 100*SMOOTHRAMP(0.25, 0.5,t);      };   };      AnyFolder MatrixCreation =    {     // Identity matrix MxM     AnyMatrix eye = EYE(10);     // Matrix MxN of ones     AnyMatrix ones = ONES(6,3);     // Matrix MxN of ones     AnyMatrix zeros = ZEROS(2,7);         // Matrix with column j set to ones     AnyMatrix ones_j = ONES_J(5,6,2);          // Matrix with row i set to ones     AnyMatrix ones_i = ONES_I(4,3,1);          // Matrix with element i,j set to one     AnyMatrix ones_ij = ONES_IJ(4,5,2,2);          // Repeat vector into a matrix     AnyVector a = {1,2,3};     AnyMatrix repvec = REPVEC(a,2);          AnyVector linspace1 = LINSPACE(1, 2, 100);     AnyVector linspace2 = LINSPACE(1.0, 9.999, 111);            }; }; #endif   #else   #endif // -*- mode: cpp;-*- // vim: syntax=cpp   ","categories": ["Tips-n-Tricks"],
        "tags": ["AnyScript"],
        "url": "https://anyscript.org/tips-n-tricks/useful-anyscript-macros/",
        "teaser":"https://anyscript.org/assets/images/macro_post_teaser.png"},{
        "title": "Creating videos",
        "excerpt":"In this post, I will show a new AnyScript template to create awesome videos of your musculoskeletal simulations with a single click.    Download on GitHub       Notice: You can now find the template directly in the AMMR. Include it like this:   #include &quot;&lt;ANYBODY_PATH_MODELUTILS&gt;/Video/CameraClassTemplate.any&quot;     Previously, I often spent hours creating videos for presentations, etc.. Now it takes me 10 minutes. Besides being easy to use the plugin also supports somewhat complicated setups where the camera follows the particular parts of the model or moves around the scene.   The Manual way   Before we talk about the plugin, let me just show how to create videos the  normal way.   The toolbar of “Model View” window in The AnyBody Modeling System has a small record button. It doesn’t record a video directly, but saves every frame as individual images.      Once you have all the images, you need to convert them into a video.   VideoMach  There good programs for doing this. The easiest solution is probably VideoMach which has a nice graphical user interface. Unfortuantly, the free version adds small watermark to the start of your videos.   FFmpeg  An even better alternative is FFmpeg. It is purely command line based, so it may not be for everyone. But it is free, open source, and insanely powerful. It is also easy to use if you remember the syntax.   Imagine we saved some images from you simulation (named model_0000.png). To the convert those files to a video run the following command in the same folder as the files:   ffmpeg.exe -r 20 -i \"model_%04d.png\" -c:v libxvid -b:v 8000k -vf \"fps=30,format=yuv420p\" out.mp4   The -r parameter determines the input framerate. So you can change that value to make the video run faster or slower.   Notice! Check the FFmpeg documentation for what the different mean.   AnyScript plugin to create Videos   Once you have created a few videos the standard way, you realize that the biggest issues are reproducibility  and the manual workflow involved. Preparing the model, setting the camera angle and framing the scene. These are things which I always end up doing multiple times before I get the result I want. And it takes forever.   There are ways we can automate some of this with AnyScript classes such as AnyCameraLookAt and AnyCamRecorder. You can even  create videos where the camera follows certain parts of your model or move around your model. All very nice. But it is also takes time to configure.   So when I truly needed an awesome video, for example for a conference, I never have the time. The consequence has been that I make far fewer videos of my simulations than what I would like.   Video Plugin class   To overcome all these issues I wrote a small plugin to create videos from your models with a single click. It is an AnyScript class_template which can be included into any model.  It only takes a few lines of code to configure.   It is hosted on GitHub, where you can download the code..   Usage   The plugin is an AnyScript class_template. It must be imported at the beginning of your model like this:   // Include the Camera template class (somewhere before first Main) #include &quot;Path/to/Video_Camera/CameraClassTemplate.any&quot;  Next we can use the Class. Just add the following 10 lines of code anywhere within Main = {...};     VideoLookAtCamera  MyCam (UP_DIRECTION = y) =    {        CameraLookAtPoint = Main.MyModel.Femur.Knee.r;          CameraFieldOfView  = 1;        CameraDirection  = {1, 1, -1};        BackgroundColor = {1, 1, 1};        VideoInputFrameRate  = 10;        VideoResolution = {1920, 1080};        Analysis = {           AnyOperation &amp;ref = Main.MyStudy.Kinematics;        };   };  The UP_DIRECTION = y argument defines how the camera is rotated. The meaning of the the different settings are summerized below:                  Member name       Type       Description                       CameraLookAtPoint       AnyVec3       The point the camera focus on. This can be fixed point or some moving point (r) on the model.                 CameraFieldOfView       AnyFloat       The vertical field of view in meters at the LookAtPoint.                 CameraDirection       AnyVec3       The direction which the camera is placed. In global coordinate with respect to the LookAtPoint. This can also be a time varying vector.                 BackgroundColor       AnyVec3       The back ground color of the scene                 VideoResolution       AnyIntArray       Resolution of the output video in {Hight,Width}                 VideoInputFrameRate       AnyInt       Determines the speed of the video. Setting it to nStep/(tEnd-tStart) make the video run in real time.                 Analysis       AnyOperationSequence       Add operations which should be part of the video in this folder           The Class also supports setting the video codec, video bit rate, video name, and more. See the full documentation for a complete list of options.   Once added, some new operations will appear in the model tree.      Previewing the camera   The class does not record what the ModelView shows. Instead the camera view is configured programmatically. The class members CameraLookAtPoint, CameraDirection, and CameraFieldOfView define what the camera records. This is really nice since it allows us to get consistent videos.   To get a preview of what the camera sees, select and run the Preview operation. It will collect a single frame and launch the Windows image viewer.              A single images will automatically open once you run the Preview operation.       Once you are satisfied with the camera settings you are ready create a full video.   Creating the video   To create a video simply select and run the Create_Video operation. That will run the model, collect the frames, convert them to a video and finally play the video.      The video will by default be saved together with the main file of the model. This can of course be customized as well.   Find the code on GitHub   The AnyScript template is hosted on GitHub, where you can also find a few examples that shows how it works. As well as documentation on the class_template and the options which are available.  ","categories": ["Tips-n-Tricks"],
        "tags": ["Creating Videos"],
        "url": "https://anyscript.org/tips-n-tricks/creating-videos-from-your-simulations/",
        "teaser":"https://anyscript.org/assets/images/posts/video_post_teaser.png"},{
        "title": "Create Animated GIFs",
        "excerpt":"If a picture is worth a thousand words. What is the value of an animated GIF?   If anyone knew the answer to this question it was  Eadweard Muybridge  who was an 19th century photographer and the grandfather of today’s biomechanical scientists. He used sequences of photographs to analyze human and animal motion. At Muybridge’s time the work created lots of attention, and even today his short animations are iconic.           Galloping horse by Eadweard Muybridge.   In a previous post I introduced an AnyScript class-template to create awesome videos of your musculoskeletal simulations with a single click. But sometimes videos are just not enough.   If we want something that loops continuously and runs automatically, then we must create animated GIF files. Small animations accomplish something, which Eadweard Muybridge discovered long ago. They immediately convey the message and spell bind the viewer by allowing them  to dwell on the details.   New feature to create animated GIFs   Today I just added a new feature to the video plugin. The ability to create good looking GIF files directly from the video. After producing the video, it can be converted into a GIF file. Just run the operation Operations.Convert_video_to_animated_gif      Creating good looking GIF is more tricky than it may seem. The number of possible colors is limited to 256 in a GIF file. Thus, it is important to specify a color palette, otherwise, the image quality will suffer.   The video plugin uses FFmpeg in two passes. The first pass generates a global color palette from the entire video. The second pass encodes the GIF file with the generated palette. You can read more on the approach in this excellent blog post   The video plugin does not create animated GIF  by default. For several reasons. Not all videos work well as an animated GIF file, and GIF files can take up a lot of space. But if you want to avoid the manual step, when generating the GIF file add the CREATE_GIF=1 argument to the AnyScript class template:     VideoLookAtCamera  MyCam (UP_DIRECTION = y, CREATE_GIF = 1) =    {        CameraLookAtPoint = Main.MyModel.Femur.Knee.r;          CameraFieldOfView  = 1;        CameraDirection  = {1, 1, -1};        BackgroundColor = {1, 1, 1};        VideoInputFrameRate  = 10;        VideoResolution = {1920, 1080};        Analysis = {           AnyOperation &amp;ref = Main.MyStudy.Kinematics;        };   };  Find the code on GitHub   The AnyScript template is hosted on GitHub,  where you can also find a few examples that show how it works. The repository also has documentation on the class_template and its options.           Animated GIF file, where the camera is spinning around the model.  ","categories": ["Tips-n-Tricks"],
        "tags": ["Creating Videos"],
        "url": "https://anyscript.org/tips-n-tricks/create-animated-gifs/",
        "teaser":"https://anyscript.org/assets/images/posts/gif-teaser.gif"},{
        "title": "Notepad++ and AnyScript files",
        "excerpt":"In this post, I will show an extension to get syntax highlighting and code folding working for Notepad++. This the first post in a series on using external editors with the AnyBody Modeling System.   Why another editor?   I shall be the first to admit that the editor in the AnyBody Modeling System (AMS) can feel very limited at times. It does have some crucial features like integration with the model tree. Even though some of these functions are indispensable when debugging models, the features of the editor in itself are pretty basic.   So when I write, edit or format AnyScript code I look for something more productive. Luckily, there are much more powerful alternatives available. Maybe you have heard about trending editors like Atom, Sublime Text, VS Code? Or perhaps a bit older options like notepad++? All are text editors which many developers couldn’t live without.   Modern text editors have become popular for very good reasons. They are fast, lightweight, and powerful and they are not limited to a particular programming language like most integrated developer environments (IDE). If you ever used some of these powerful text editors, it can be hard to live without the features they provide.   AnyScript support in Notepad++   Notepad++ was my favorite text editor for many years and I often still use it. It is fast and works well on Windows. To enable AnyScript support in Notepad++ you need to the install AnyScript language extension.   You can find the extension on GitHub, or download it here directly:    Download AnyScript Notepad++   Save the file AnyScript.xml to your computer. Open Notepad++ and select the menu: “Language”-&gt;”Define your language” and click import…      With the extension in place AnyScript code will highlight correctly, and braces will match up. And it is possible to collapse pairs of braces {/}, as well as pairs of #if/#endif. That is huge advantage when working with very big AnyScript files.   Why is Notepad++ usefull   The main benefits are:      Effective search replace with regex   Code folding   Syntax highlighting   Macro recording/playback   Multi editing   Document map   To really understand the power of notepad++ see this example of column mode editing:           The ability to write at multiple cursors or select a column of text is fantastic.   ","categories": ["Editors"],
        "tags": ["Syntax highlighting"],
        "url": "https://anyscript.org/editors/notepad++-and-anyscript/",
        "teaser":"https://anyscript.org/assets/images/posts/npp-teaser.png"},{
        "title": "AnyMoCap: A model framework motion caputure based models",
        "excerpt":"The AnyMoCap model is an effort to create a simple and unified framework for doing any kind of mocap analysis with the AnyBody Modeling System.   This is first post in  a series on the AnyMoCap framework. In a series posts I will show how to use the frame and presents some of the features that makes it much easier to do motion capture based modelling.   Current motion caputure model examples in the AnyBody Managed Model Repository (AMMR) are releative complex and quite difficult to understand for new users.   The reason is that the MoCap models are different from the other examples models in the AMMR. Most importantly, MoCap models usually require an over-determinate kinematic solver to handle the excess in information that the optical markers provide. The over-determinate solver in AMS works great, but it can only find velocities and accelerations numerically. That has some performance issue when running inverse dynamics analysis. To overcome the problem, the MOCAP analysis is split into a two-step producedure. The two steps are ‘Marker tracking’ and  ‘Inverse dynamic analysis’ on the figure below:      The overdeterminate kinematic analysis solves the marker tracking problem, and writes joint angles to a a set of files. These joint angles can then be used with the determinate kinematic solver in the inverse dynamic analysis.   Model structure.   The AnyMoCap framwork contains two main folder Examples and Model.   AnyMoCap/  ├───Model/ ├───Examples/  │   ├───Plug-in-gait-FullBody/ │   ├───Plug-in-gait-LowerExtremity/ │   └───SpecialFeatures/   The core of the framework is located under Model/. The core files will eventually become part of the AMMR, and you shouldn’t need to change these files unless you want to help improve the AnyMoCap framework (See “Contributing” below.)   The Examples/ folder contains examples of how to use the framework. Thre are currently two full blown examples of how to create a FullBody and LowerExtremity model with the Plug-in-Gait marker protocol. Other examples with other marker protocols will come soon. The SpecialFeatures/ folder contain small examples on specific features of the framework.   Examples are self-contained and could be locaated anywhere as long they have a valid reference link to where the AnyMoCap model is located on your computer.   Usage   ","categories": ["AnyMoCap"],
        "tags": ["Motion Capture"],
        "url": "https://anyscript.org/anymocap/anymocap-motion-capture-framework/",
        "teaser":"https://anyscript.org/assets/images/posts/anymocap_teaser.png"},{
        "title": "Calculating the Instantaneous Axis of Rotation",
        "excerpt":"The instantaneous axis of rotation between two bodies is a useful concept in biomechanics.   In this post, we will dig into how to calculate the instantaneous axis of rotation and show an AnyScript class_template that calculate and displays the axis between any two reference frames in the AnyBody Modeling System.   Before we dive into the AnyScript implementation let us look briefly at the math behind the instantaneous axis of rotation.   Rigid body motion in 3D   We can view any displacement of a body in a three-dimensional space as a rotation around a single axis and a translation along that axis. This gives rise to the idea of a screw motion in 3D along what is also called the helical axis. If we split the movement up into infinitesimally small movements each of these will have an rotation axis and a linear velocity along that axis. This is the instantaneous axis of rotation, and as the name indicate will change direction and location as the object moves.   The angular velocity of rigid body is a vector quantity shared by all point of the rigid body. My old engineering math book defines it from the rate of change of the rotation matrix $R$:     If we know the angular and linear velocity of any point on a rigid body, we can calculate the properties of the screw motion and the instantaneous axis of rotation.   Using $\\vec{\\omega}$ we can write the velocity $\\vec{v}_P$ of a point $P$ at some distance $\\vec{r}$ from the instantaneous axis of rotation as a sum of the linear velocity $\\vec{v}_C$ along the axis of rotation and the tangential velocity around the axis of rotation:               Rigid body rotating around an axis of rotation.   Similarly we can also calculate backwards and find the intantanous axis of rotation at some distance $-\\vec{r}$ from any point if we know the linear velocity of the point and the angular velocity. This is given by:     Thus if know the position of a point $\\vec{r}_P$, its  linear velocity $\\vec{v}_P$ we can find closest point $\\vec{r}_C$ on the rotation axis as:        Short proof of $\\ref{eq:2}$, skip it if you like:     Start with $\\vec{\\omega} \\times \\vec{v}_P$ and insert $\\ref{eq:1}$. Since $\\vec{\\omega}$ and $\\vec{v}_C$ are parallel their cross product cancel out.         Next we use the vector tripple product to expand, and we note that $\\vec{\\omega}\\cdot\\vec{r}$ cancel out since the shortest vector from the rotation axis to any point is always perpendicular to angular velocity:         Finally we have:         Disclaimer:     The math may not be strictly accurate. Sorry, I am an Engineer :) If you have more math skill than I please help make this more concise.    Properties   If for example, we have a rigid body with angular velocity $\\vec{\\omega}$ and some point $P$ with position $\\vec{r}_P$ and velocity $\\vec{v}_p$ then we can define the different properties:                  Quantity       Description                              The magnitude of angular rotation.                        The direction of the intantanous axis of rotation.                        The point C on the intantanous axis of rotation.                        Ratio of angular to linear angular velocity                        The linear velocity at point $C$ along the axis of rotation.           The list of properties is inspired by this answer from StackExchange Physics   All we need to know is the rotation velocity of a body and the velocity of any point to find the instantaneous axis of rotation.   AnyScript implementation   In AnyScript we can easily find the angular velocity, and the linear velocity of a reference frame using the two classes AnyKinRotational and AnyKinLinear.   An implementaion to find the instantanous axis of rotation could be as simple as:      AnyKinRotational Rotational ={      AngVelOnOff = On;      AnyRefFrame&amp; Ref1= .ReferenceFrame;    };      AnyKinLinear Linear ={      Ref=-1;      AnyRefFrame&amp; Ref1= .ReferenceFrame;    };        /// Direction of the instantaneous axis of rotation    AnyVec3 e_iaor = Rotational.Vel/vnorm(Rotational.Vel)     /// The point on the rotation axis closest to ReferenceFrame origin    AnyVec3 r_iaor = Linear.Pos + cross(Rotational.Vel, Linear.Vel)/(vnorm(Rotational.Vel)^2);  It is important to set AngVelOnOff = On; to make AnyKinRotational output the angular velocity vector. Of course this the code above is very simplified. We would also like a way to find the axis between between two moving bodies, and also draw the axis in the process.   AnyScript class template   We have created a custom class template that makes it easy to calculate the properties listed above and display the instantaneous axis of rotation. Here is a short example on how to use the class:   #include &quot;path/to/InstantaneousAxisOfRotation.any&quot;  Main = {   InstantaneousAxisOfRotation IAOR (       Body1 = .Segments.Ground,       Body2 = .Segments.Ball   ) = {   };  That is all it takes. Here a how it looks for few very simple models:             Two examples of displaying the instanteneous axis of rotation for two simple models.   The code will eventually become part of the AnyBody Managed Model Repository (AMMR), which is shipped with the AnyBody Modeling System. But until the next release of the AMMR, the class template can be downloaded from GitHub.    Get IAOR class template   References:     QA on Physics stackexchange   Wikipedia on angular velocity  ","categories": ["Tools"],
        "tags": ["Kinematics"],
        "url": "https://anyscript.org/tools/instantaneous-axis-of-rotation/",
        "teaser":"https://anyscript.org/assets/images/posts/iaor_teaser.png"},{
        "title": "Add limits to the Range of Motion",
        "excerpt":"In this post, I will show a new AnyScript class template to add range-of-motion limits to Human body model.   The implementation consist of two AnyScript class templates. A high level class template RangeOfMotionLimits which makes it easy to add Range-of-motion limits to all the joints on the Musculoskeltal model.   Behind the scenes the high-level template uses a more generic low-leve template KinLimitsDriver, which can add limits to any kinematic measure.   Usage:   To use the high level class template RangeOfMotionLimits you must first  include the file in which it is defined.   Add #include \"../path/to/RangeOfMotionLimits_template.any\" in the beginning of your main file. Then create the RangeOfMotionLimits class inside Main after  the human model is included in the model:   #include &quot;../path/to/RangeOfMotionLimits_template.any&quot;  Main = {    // It is important that the human model is include   // before the JointLimit template. This is to ensure   // that all BM statements are defined.   #include &quot;&lt;ANYBODY_PATH_BODY&gt;/HumanModel.any&quot;     RangeOfMotionLimits ROM_Limits(       ARM_RIGHT = BM_ARM_RIGHT,       ARM_LEFT = BM_ARM_LEFT,       LEG_RIGHT = BM_LEG_RIGHT,       LEG_LEFT = BM_LEG_LEFT,       TRUNK_NECK = BM_TRUNK_NECK    ) = {       // Example of changing af few of the limits       Limits.Trunk.PelvisThoraxExtension = {-90, 90};       Limits.Right.ElbowPronation = {-90, 90};    };          If some joint should not have range of motion limits, the class accepts arguments for disabling individual joint limits:     RangeOfMotionLimits RoMLimits(     PELVIS_THORAX_LATERAL_BENDING = &quot;Off&quot;     ...   Find the code on GitHub   The AnyScript template is hosted on GitHub, where you can find examples and documentation on the class_template and the options which are available.  ","categories": ["tools"],
        "tags": ["kinematics","joints"],
        "url": "https://anyscript.org/tools/rom-limits/",
        "teaser":"https://anyscript.org/assets/images/posts/rom-limits_teaser.png"},{
        "title": "AnyScript support in Visual Studio Code",
        "excerpt":"Visual Studio Code(VS Code) is one of the newest text editors to join the group of new powerful source code editors like Atom,  Sublime Text and brackets. All of which have become extremely popular in recent years.   Visual Studio Code  is currently my favorite text editor. It is cross-platform, lightweight, extensible and powerful. So of course I want to use it when working with AnyScript. In this post I will show a new AnyScript extension for VSCode, that does syntax highlighting, code folding, and snippets.   This is the second post in our series on using external editors for AnyScript. In the first post) I showed a handy extension for Notepad++, so if you use Notepad++ check that post.   Visual Studio Code  Visual Studio Code or VS Code is a source code editor developed by Microsoft for both Windows, Linux and MacOS. It is free, open source and includes a lot of advanced features for working with source code. It is also very customizable so  users can change themes, keyboard shortcuts and much more.           Screenshot from Visual Studio Code, with AnyScript syntax highlighting.   VS code looks a little different from traditional Windows programs, but it is easy enough to use. The simple looks deceives. VS Code has all the same features as for example Notepad++, and if you miss a certain feature VS Code has a good extension system. So the chances are that there is a user contributed extension to help your specific need.   AnyScript Extension  In the screen shoot above shows a file with AnyScript syntax highlighting. Highlighting in AnyScript files works as soon as the AnyScript extension is installed. It is easy to install. Just click the extension icon at the bottom of left sidebar and search for AnyScript. Then click install.           Installing the AnyScript extension.   Syntax highlighting and code folding   Once the extension is installed the all AnyScript files will have highlighting.   THe plugin also gives you code folding, which allows you to collapse classes and folders. A feature which is really handy when working on large files.      VS hCode supports code snippets which are templates that makes it easier to write repeating code patterns. This part isn’t fully supported by the extension yet. But I have added few snippets for the following classes and functions: AnyDrawRefFrame, AnyRefNode, RotMat, AnyFunConst,  AnyFolder, AnyKinMeasureOrg, AnyKinRotational.   The snippet inserter is activated by pressing ctrl-shift-P and then writing insert snippet. Note: you need to be in a AnyScript file to get the AnyScript snippets.   Snippets can also be inserted using the tab completer. So if you start to type the name of the class e.g. AnyDrawRe and press tab the snippet is inserted.      The snippets are just meant as a test, but hopefully we can have snippets for all the AnyScript classes in the future.   Help make the extension better   Here is an link to page where the extension live: https://github.com/AnyBody/vscode-anyscript. Any improvements and help is most appreciated.  ","categories": ["Editors"],
        "tags": ["Syntax highlighting","Visual Studio Code"],
        "url": "https://anyscript.org/editors/anyscript-in-vscode/",
        "teaser":"https://anyscript.org/assets/images/posts/vscode-teaser.png"},{
        "title": "Freeing the AnyBody Tutorials",
        "excerpt":"Anyone, who works with AnyBody modeling system has at one time used the AnyBody tutorials. They are a valuable resource when learning to use the AnyBody Modeling System and there are more than 15 different tutorials covering everything from ‘Getting Started’ tutorials for the new users to very advanced topics like force dependent kinematics and FEA interfaces.   Today, we are releasing a new web based version of the tutorials.           The new tutorials   A little history   The tutorials used to live as compiled HTML (CHM), a binary format for a documentation system called Microsoft HTML Help. You find this kind of help resources in many older Windows Programmers.           The old Tutorials served through Microsoft HTML help   Today it may look old fashioned, but it was the best choice for distributing documentation in 2003 when the first version of AnyBody emerged.   Microsoft has since discontinued the HTML Help system. Today there are much better options for software documentation which makes it easier to both use the tutorials and maintain them.   Sphinx for software documentation   Sphinx is a tool for generating software documentation. The Python community originally developed it for creating the documentation for the Python programming language. Today it is widely used in many different domains. The Linux community recently (2016) chose Sphinx as the new documentation system for the Linux kernel. Sphinx is well maintained and actively developed, and very easy to use.   Sphinx converts reStructuredText files into HTML, pdf, epub or other formats. reStructuredText is simply plain text files with extra simple markup to define headers and other types of formatting.   A reStructuredText file could look like this:    Lesson 2: Advanced Concepts ===========================  Open the model from lesson 1 and change the following lines:  .. code-block:: AnyScript      InverseDynamics.Criterion = {       Type = §MR_Polynomial§;     };  Now we have specified polynomial muscle recruitment, which  comes down to the following objective function:  .. math:: G = \\sum_{i} \\left( \\frac{f_i}{N_i} \\right)^p  We have not, however, specified what the power *p* is. In the absence of a specification, AnyBody assumes *p* = 3, If we  reload and rerun the model now, we get the following result:  .. figure:: _static/lesson2/chart1.png    :scale: 50 %        Results with 5 order Polynomial muscle criterion.    Having the tutorials as plain text, may at first seem like a disadvantage. The AnyBody tutorials are currently stored as Word documents. But reStructuredText has many advantages as well.      Better control of formatting and style   Easier tracking of updates and changes   Pictures and images live outside the document   Makes it easier to accept contribution from users   Finally, MS Word can still be used when writing new tutorials. The *.docx file can be converted into reStructured text using the Pandoc document converter. Pandoc can convert tables, any formatting, embedded images into reStructuredText. Pandoc even converts equations from MS Word into Latex style formulas which work in reStructuredText files.   Hosting tutorials on GitHub   The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.           Source files: https://github.com/AnyBody/anybody-tutorial            Web page: https://anyscript.org/tutorials/dev       Contributions are always welcome! So if you find typos, missing links or anything else help us fix it. It is easy. Just fork the repository on GitHub, make the changes, and issue a pull request.   Every pull request is automatically tested, to ensure that Sphinx builds the tutorials without errors. This done using Travis CI      See status of the Travis CI build: .   Once a change is accepted and merged into the repository the script also automatically deploys the tutorial web page.   ","categories": ["news"],
        "tags": ["Tutorials","Sphinx"],
        "url": "https://anyscript.org/news/freeing-the-anybody-tutorials/",
        "teaser":"https://anyscript.org/assets/images/posts/tutorials_teaser.png"},{
        "title": "Getting AnyBody and Numpy to work",
        "excerpt":"With the release of the AnyBody Modeling System 7.1 update, we thought it was time to make a post about all the improvements in the new model repository.   The AnyBody Managed Model Repository (AMMR) version 2.0 marks the culmination of a huge task to update our existing models and adding new models and examples.           The new tutorials   New AMMR documentation   Future work   Of course we are not done. There are new model developments in the pipeline, and some of the improvements to the structure of the lower extremity model we would also like to do for the upper body.   A little history   The tutorials used to live as compiled HTML (CHM), a binary format for a documentation system called Microsoft HTML Help. You find this kind of help resources in many older Windows Programmers.           The old Tutorials served through Microsoft HTML help   Today it may look old fashioned, but it was the best choice for distributing documentation in 2003 when the first version of AnyBody emerged.   Microsoft has since discontinued the HTML Help system. Today there are much better options for software documentation which makes it easier to both use the tutorials and maintain them.   Sphinx for software documentation   Sphinx is a tool for generating software documentation. The Python community originally developed it for creating the documentation for the Python programming language. Today it is widely used in many different domains. The Linux community recently (2016) chose Sphinx as the new documentation system for the Linux kernel. Sphinx is well maintained and actively developed, and very easy to use.   Sphinx converts reStructuredText files into HTML, pdf, epub or other formats. reStructuredText is simply plain text files with extra simple markup to define headers and other types of formatting.   A reStructuredText file could look like this:    Lesson 2: Advanced Concepts ===========================  Open the model from lesson 1 and change the following lines:  .. code-block:: AnyScript      InverseDynamics.Criterion = {       Type = §MR_Polynomial§;     };  Now we have specified polynomial muscle recruitment, which  comes down to the following objective function:  .. math:: G = \\sum_{i} \\left( \\frac{f_i}{N_i} \\right)^p  We have not, however, specified what the power *p* is. In the absence of a specification, AnyBody assumes *p* = 3, If we  reload and rerun the model now, we get the following result:  .. figure:: _static/lesson2/chart1.png    :scale: 50 %        Results with 5 order Polynomial muscle criterion.    Having the tutorials as plain text, may at first seem like a disadvantage. The AnyBody tutorials are currently stored as Word documents. But reStructuredText has many advantages as well.      Better control of formatting and style   Easier tracking of updates and changes   Pictures and images live outside the document   Makes it easier to accept contribution from users   Finally, MS Word can still be used when writing new tutorials. The *.docx file can be converted into reStructured text using the Pandoc document converter. Pandoc can convert tables, any formatting, embedded images into reStructuredText. Pandoc even converts equations from MS Word into Latex style formulas which work in reStructuredText files.   Hosting tutorials on GitHub   The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.           Source files: https://github.com/AnyBody/anybody-tutorial            Web page: https://anyscript.org/tutorials/dev       Contributions are always welcome! So if you find typos, missing links or anything else help us fix it. It is easy. Just fork the repository on GitHub, make the changes, and issue a pull request.   Every pull request is automatically tested, to ensure that Sphinx builds the tutorials without errors. This done using Travis CI      See status of the Travis CI build: .   Once a change is accepted and merged into the repository the script also automatically deploys the tutorial web page.   ","categories": ["news"],
        "tags": ["AMMR","Models"],
        "url": "https://anyscript.org/news/Numpy-and-scipy/",
        "teaser":"https://anyscript.org/assets/images/posts/ammr2_teaser.png"},{
        "title": "What is new AMMR 2.0",
        "excerpt":"Join us for the launch of version 7.1 of our musculoskeletal simulation software - The AnyBody Modeling System, and a new version of the AnyBody Model repository (AMMR 2.0).   In this webcast, Morten Enemark Lund, R&amp;D Engineer at AnyBody Technology, will the new software features and the exciting new model repository which is shipped with version 7.1.   THe features include:           New lower extremity model (TLEM2.1)            New framework for MoCap models (AnyMoCap)            New Manidble model            New calibration scheme            Numerous updates to body models and example applications.       With the release of the AnyBody Modeling System 7.1 update, we thought it was time to make a post about all the improvements in the new model repository.   The AnyBody Managed Model Repository (AMMR) version 2.0 marks the culmination of a huge task to update our existing models and adding new models and examples.           The new tutorials   New AMMR documentation   New Tutorials   AnyMoCap   New Lower Extremity model (Version 2.1)   Future work   Of course we are not done. There are new model developments in the pipeline, and some of the improvements to the structure of the lower extremity model we would also like to do for the upper body.   A little history   The tutorials used to live as compiled HTML (CHM), a binary format for a documentation system called Microsoft HTML Help. You find this kind of help resources in many older Windows Programmers.           The old Tutorials served through Microsoft HTML help   Today it may look old fashioned, but it was the best choice for distributing documentation in 2003 when the first version of AnyBody emerged.   Microsoft has since discontinued the HTML Help system. Today there are much better options for software documentation which makes it easier to both use the tutorials and maintain them.   Sphinx for software documentation   Sphinx is a tool for generating software documentation. The Python community originally developed it for creating the documentation for the Python programming language. Today it is widely used in many different domains. The Linux community recently (2016) chose Sphinx as the new documentation system for the Linux kernel. Sphinx is well maintained and actively developed, and very easy to use.   Sphinx converts reStructuredText files into HTML, pdf, epub or other formats. reStructuredText is simply plain text files with extra simple markup to define headers and other types of formatting.   A reStructuredText file could look like this:    Lesson 2: Advanced Concepts ===========================  Open the model from lesson 1 and change the following lines:  .. code-block:: AnyScript      InverseDynamics.Criterion = {       Type = §MR_Polynomial§;     };  Now we have specified polynomial muscle recruitment, which  comes down to the following objective function:  .. math:: G = \\sum_{i} \\left( \\frac{f_i}{N_i} \\right)^p  We have not, however, specified what the power *p* is. In the absence of a specification, AnyBody assumes *p* = 3, If we  reload and rerun the model now, we get the following result:  .. figure:: _static/lesson2/chart1.png    :scale: 50 %        Results with 5 order Polynomial muscle criterion.    Having the tutorials as plain text, may at first seem like a disadvantage. The AnyBody tutorials are currently stored as Word documents. But reStructuredText has many advantages as well.      Better control of formatting and style   Easier tracking of updates and changes   Pictures and images live outside the document   Makes it easier to accept contribution from users   Finally, MS Word can still be used when writing new tutorials. The *.docx file can be converted into reStructured text using the Pandoc document converter. Pandoc can convert tables, any formatting, embedded images into reStructuredText. Pandoc even converts equations from MS Word into Latex style formulas which work in reStructuredText files.   Hosting tutorials on GitHub   The new source files for tutorials are hosted on the AnyBody Github account togehter with the build HTML files.           Source files: https://github.com/AnyBody/anybody-tutorial            Web page: https://anyscript.org/tutorials/dev       Contributions are always welcome! So if you find typos, missing links or anything else help us fix it. It is easy. Just fork the repository on GitHub, make the changes, and issue a pull request.   Every pull request is automatically tested, to ensure that Sphinx builds the tutorials without errors. This done using Travis CI      See status of the Travis CI build: .   Once a change is accepted and merged into the repository the script also automatically deploys the tutorial web page.   ","categories": ["news"],
        "tags": ["AMMR","Models"],
        "url": "https://anyscript.org/news/ammr-2.0/",
        "teaser":"https://anyscript.org/assets/images/posts/ammr2_teaser.png"},{
        "title": "AMMR now has a DOI",
        "excerpt":"Digital Object Identifiers (DOIs) are the foundation of references and metrics in the world of academia. With the release of AMMR 2.1.1 we have also added a DOI to the AnyBody Managed Model Repository (AMMR):   .   The DOI for the AMMR are issues by Zenodo, which is an European Open Science platform hosted at CERN. If you click the link above you will be directed to the side shown below.            The AMMR record on Zenodo    Archived versions   The DOI above always links to the newest version of the AMMR. That is called a  concept DOI, and is useful if you want to cite all version of the AMMR.  However, the AMMR is updated regularly, and we would often like to cite a  specific version of the AMMR. Luckily, Zenodo supports DOI versioning, and  every version of the AMMR has their own DOI.                  Version       DOI       ReleaseData                       All versions       10.5281/zenodo.125076                         AMMR-2.1.1       10.5281/zenodo.1287730       June 12, 2018                 AMMR-2.1.0       10.5281/zenodo.125127       March 25, 2018                 AMMR-2.0.0       10.5281/zenodo.1251274       November 30, 2017                 AMMR-1.6.6       10.5281/zenodo.1250765       March 13, 2017           See also: The complete list of releases on Zenodo.   Once a DOI is created Zenodo also archives all the associated files to ensure data is never changed or lost. This effectively means that you can now also download all archived versions of the AMMR directly from Zenodo.   Citing the AMMR   DOI’s will also help you cite the AMMR and specify exactly which version the AMMR you use. This is really important for scientific publications so other can reproduce your results. The DOI ensures that others can be confident that they get the exact version of the AMMR that you used. Once a DOI is minted the underlying files can’t be changed. So DOIs are also essential for traceability.   Zenodo will even generate the correct citation style for all journals.      Here is an example of how to cite the AMMR v.2.1.1 for Journal of Biomechanics:      How to cite:     Morten Enemark Lund, Søren Tørholm, &amp; Moonki Jung. (2018, June 12). The AnyBody Managed Model Repository (AMMR) (Version 2.1.1). Zenodo. http://doi.org/10.5281/zenodo.1287730     More research output   You can find more research output from AnyBody Technology on the AnyBodyTech Zenodo community page.  ","categories": ["News"],
        "tags": ["AMMR","Models"],
        "url": "https://anyscript.org/news/DOI/",
        "teaser":"https://anyscript.org/assets/images/posts/doi_teaser.png"},{
        "title": "Body Model Configuration App",
        "excerpt":"One of the first things I did when starting to use the AnyBody Modeling System, was to understand how to configure the human model. This means enabling and disabling different body parts and setting up the available options for muscles, ligaments etc. The model is configured via AnyScript by defining switches which we call Body Model (BM) statements.   #define BM_ARM_RIGHT ON  Wouldn’t it be nice to configure the model by having some buttons and instantaneous visual feedback as well? That is what I thought! Therefore, I have developed a software which provides a graphical user interface (GUI) for configuring the Body Model, called BM-Plugin. By using it, you will be able to configure your human model in a more friendly manner but without trying to give up the flexibility of AnyScript.           BM Plugin: gives you the ability to visually configure the Body Model.   BM-Plugin has in target both beginner and advanced AMS users. If you have little to no experience using AnyScript, the BM Plugin will help you a lot in getting started with it and to understand how switches and BM statements work.  If you are an advanced AMS user, you will find configuring your human model much easier and much faster by using the plugin. And don’t worry about loosing your freedom with AnyScript! BM Plugin is not meant to replace it, it is meant to write it for you, so it saves you time.   In the remainder of this post I will show you what the plugin is able of doing and some technicalities.   How to get and use BM-Plugin   BM-Plugin comes integrated with AMMR v2.2(???) and it is available to use in AMS starting with version v7.2(???). All you have to do is to make sure that you have these versions or later available on your computer. You can find more information about how to get the latest AMMR  here. Once you have everything ready, load your model containing the HumanModel:   #include &quot;&lt;ANYBODY_PATH_BODY&gt;/HumanModel.any&quot;  and if everything is fine, you should be able to start the BM-Plugin by clicking the button marked in the figure below:           Load your model and start the plugin by only clicking a button.   Using BM-Plugin   The BM-Plugin is structured in a number of tabs, each of them giving you options to adjust the configuration of different body parts while providing visual feedback if available. These tabs are: Body, Legs, Arms, Trunk and Mannequin Drivers. Once the desired configuration is set, you can load it in AMS by clicking Apply or OK. The difference is that by clicking Apply the Plugin will stay open for you to configure the model further. When OK is clicked, the configuration is saved in a history file which is available in the Apply History drop menu, next to the Apply button. It is therefore possible to load a previous configurations of the model.           The 'Body', 'Legs', 'Arms', 'Trunk' and 'Mannequin Drivers' tabs.   Of course, not all BM statements have a visual representation in the AMS Model View or are directly related to physical body parts. Therefore, the BM statements which were not classified in the tabs mentioned before can be found and modified in the Advanced tab.   By having the presented overview of the Plugin, you should be ready to use it now. However, if you are interested in finding some details about how it works behind scenes the too, continue reading.   How BM-Plugin works   As stated in the introduction, the BM-Plugin is dependent on the HumanModel. Therefore, every time you start the plugin, it will check your .main.any file to determine if it is included. If it is, the Plugin will create a new file named BodyModelConfiguration.any inside the Model folder next to your .main.any file. The plugin will then ask you if you allow it to include this file inside the main file (I recommend that you do):   #include &quot;Model/BodyModelConfiguration.any&quot;  The plugin will store and modify all the needed BM statements for your model inside the BodyModelConfiguration.any file. I encourage you to use this file to store the BM statements regardless if you use the plugin frequently or not. You will also find that most of the examples using the HumanModel have this structure implemented and they are ready to be configured using the BM-Plugin.   The Configuration file can be seen inside the plugin under the Script File tab:           The `Script File` tab.   Now I think you know enough about the plugin to try it yourself, so what are you waiting for?   Any development suggestions and feedback are more than welcomed!  ","categories": ["Tools"],
        "tags": ["Model configuration","BM switches"],
        "url": "https://anyscript.org/tools/body-model-configurator/",
        "teaser":"https://anyscript.org/assets/images/posts/BM_Plugin_teaser.JPG"},{
        "title": "Calculating maximum model strength",
        "excerpt":"When working with subject specific scaling of models, it can be a valuable tool to know what the strength of your model is for a given posture. With strength we mean the maximum permissible load that the model can carry in a given posture. This post will show you a way of calculating the maximum strength of a simple 2D arm model in various postures. The concepts presented can of course be extended to models involving the full body model or parts of it.         Fig. 1: The simple 2D arm model used in this example.   For us to do so, we first need to setup an example model. The model is a 2D arm model comprised of an upper and lower arm segment, attached with 8 simple muscles (fig. 1). The model is constraint to only allow movement in the global x and y direction. This allows us to impose movements which resembles flexion and extension of the shoulder and elbow joint. Further, we want to show a general way of calculating the strength independent of the movement, we therefore set up four load scenarios to mimic a flexion, extension, push, and pull movement.   Since we want to investigate maximum strength, we need to be sure that the muscles are recruited appropriately. This is done by switching to the MinMax_Strict muscle recruiter in the study section of our model. For more information on muscle recruitment in the Anybody Modelling software, se this tutorial.   The first step in finding the default maximum strength for a posture, is to know the relationship between load and MaxMuscleActivity ( $m_{act}$ ). We can do this by implementing a parameter study to investigate the $mmact$ across a spectrum of loads. This is done using the AnyParamStudy class as seen below:     AnyParamStudy StrengthEval =    {     Analysis = {AnyOperation&amp; Opr = ..ArmStudy.InverseDynamics;};      nStep = {100};      AnyDesVar load =      {       Val = Main.ArmModel.Loads.Dumbbell.load;       Min = 0;       Max = 250;     };      AnyDesMeasure maxact =      {       Val = max(Main.ArmStudy.MaxAct());     };   };  This study runs our model through the loads defined in the $load$ variable. So, in this example it does 100 steps where it starts at 0 N and stops at 250 N. This enables us to plot the $m_{act}$ as a function of the load. By running the parameter study for all four load scenarios we end up with a graph as seen in fig. 2.         Fig. 2: Max muscle activity as a function of the applied load. Dashed line indicate $mmact = 1$.   We can see that for very low loads there might be other factors than the applied load affecting the relationship. If we dwell by this fact and wonder why this could be, we could infer that the influence of gravity and segment mass could interfere with the relationship between $load$ and $m_{act}$. This means that when applying low external loads, the important factor in $m_{act}$ is the mass of the moved segments, and the gravity imposed on those segments.   The graphs on fig. 2 also tells us that for high loads there is a linear relationship between load and $m_{act}$, and the linear part is crossing $m_{act} = 1$ for all scenarios. We can use this information to calculate the maximum strength of the model. If we look at the equation for a linear function it looks like this:     Where $a$ is the slope of the function, and $b$ is the intercept with the y-axis. The slope of the linear part can be calculated using only two points and applying the equation:     Now that we know the coordinates of two points and the slope, we can start figuring out what the load is for an activity of 1 ( $m_{act} = 1$ ). For this we again look at equation $\\ref{eq:2}$, only this time we know the slope, the point $(load_{1},m_{act_{1}})$, and the $m_{act}$ coordinate, which should be equal to 1. We are therefore interested in finding the corresponding $load_{max}$. We rearrange equation $\\ref{eq:2}$, into:     This allows us to evaluate what the maximum load $load_{max}$ is, that the model can support for a given posture. To check our results, we can calculate the maximum strength for our four scenarios using equation $\\ref{eq:3}$ and try to implement the output load in our models. Table 1. shows the calculated strengths of the models, and the $m_{act}$ when applying the $load_{max}$ values.                  Movement       $Load_{max}$ (N)       New $m_{act}$                       Extension       70.97891372       1.0                 Flexion       78.33099967       1.0                 Push       93.43104145       1.0                 Pull       113.1664796       1.0           Table 1: Calculated $load_{max}$ and new $m_{act}$ for each movement.   Now we can calculate the maximum load for any given posture!   Find the code on GitHub   The AnyScript example which shows the concept of finding the maximum strength is available on GitHub.  ","categories": ["tools"],
        "tags": ["strength","muscle"],
        "url": "https://anyscript.org/tools/estimating-maximum-model-strength/",
        "teaser":"https://anyscript.org/assets/images/posts/max-strength_teaser.png"},{
        "title": "Solving optimization problems using Python",
        "excerpt":"The AnyBody Modeling System (AMS) provides a build-in optimization class AnyOptStudy, and with it you have the opportunity to solve advanced mathematical optimization problems.   See also: You can get a taste of how it works in the newly updated tutorial on  parameter and optimization studies   Extending the optimization   Of course there can be situations were you want to do a little more than what the AMS optimization offers. Say you have two seperate models were you wanted to optimize some parameter across the performance in both models? or perhaps you wanted to use a specific algorithm suitable for your exact problem? To solve these kinds of problems, you could perform the optimization process from a third party software.   In this post we will demonstrate how these problems can be solved using Python. This topic is part of a new Anybody Tutorial which describes the content of this post in detail.   As part of the post we will show how to integrate the Scipy optimization package Scipy.optimize.minimize by running the Anybody 2D bike model from Python, using the AnyPyTools package.         Fig. 1: The 2D bike model used in this example and the new tutorial.   Optimization example   The process of performing optimization of AMS models through Python can be sketched in four steps:      Defining a function to call the models using AnyPyTools and extract the designvariables   Defining a objective function to be either minimized or maximized   Defining the constraints and bounds of the problem   Running the optimization   And the whole Python code to complete these four steps could look like this:       import math     import scipy     from anypytools import AnyPyProcess     from anypytools.macro_commands import Load, OperationRun, Dump SetValue       def run_model(saddle_height, saddle_pos, silent=False):         &quot;&quot;&quot;Run the AnyBody model and return the metabolism results&quot;&quot;&quot;         macro = [             Load(&quot;BikeModel2D.main.any&quot;),             SetValue(&quot;Main.BikeParameters.SaddleHeight&quot;, saddle_height),             SetValue(&quot;Main.BikeParameters.SaddlePos&quot;, saddle_pos),             OperationRun(&quot;Main.Study.InverseDynamics&quot;),             Dump(&quot;Main.Study.Output.Pmet&quot;),             Dump(&quot;Main.Study.Output.Abscissa.t&quot;),         ]         app = AnyPyProcess(silent=silent)         results = app.start_macro(macro)         return results[0]       def objfun(designvars):         &quot;&quot;&quot;Calculate the objective function value&quot;&quot;&quot;         saddle_height = designvars[0]         saddle_pos = designvars[1]         result = run_model(saddle_height, saddle_pos, silent=True)          if &quot;ERROR&quot; in result:             raise ValueError(&quot;Failed to run model&quot;)          pmet = scipy.integrate.trapz(result[&quot;Pmet&quot;], result[&quot;Abscissa.t&quot;])          return float(pmet)       def seat_distance_constraint(designvars):         &quot;&quot;&quot;Compute contraint value which must be larger than zero&quot;&quot;&quot;         return math.sqrt(designvars[0] ** 2 + designvars[1] ** 2) - 0.66       constaints = {&quot;type&quot;: &quot;ineq&quot;, &quot;fun&quot;: seat_distance_constraint}     bounds = [(0.61, 0.69), (-0.22, -0.05)]     initial_guess = (0.68, -0.15)      solution = scipy.optimize.minimize(         objfun, initial_guess, constraints=constaints, bounds=bounds, method=&quot;SLSQP&quot;     )      print(solution)  Breaking down the sections   To elaborate a little on the sections, the first part defines the run_model function. This function takes in two arguments and assigns them to the saddleheight and saddleposition in the AMS model. The function returns the Pmet value for each timestep in the model.   Details and advanced options of this function and it’s components can be found in the AnyPyTools documentation.   The second part defines the objective function in question. This function takes in a list of design variable arguments and utilizes the run_model function, afterwards it integrates the Pmet over the whole time series and returns the result.   Next up, the constraints and bounds are defined. For this example only a seat distance constraint is present. The bounds for each of the design variables is defined in the bounds variable. Lastly, the optimization process is performed, and here it envokes the SLSQP algorithm.   For more details and examples of the capabilities of the Scipy.optimizepackage, follow this link.   And there we have it. A full optimization of a AMS model, and a easy template to build other and more advanced optimization processes upon.   Try it now: Make sure to try out the full AMS tutorial here.   This post is hosted on GitHub, feel free to provide feedback here.  ","categories": ["tools"],
        "tags": ["python","Optimization"],
        "url": "https://anyscript.org/tools/Solving-Optimization-Problems-Using-Python/",
        "teaser":"https://anyscript.org/assets/images/teaser.jpg"},{
        "title": "New AnyScript Forum",
        "excerpt":"This week we launched a new forum site for the AnyScript community ✨ The new site replaces the old forum which has served the last 10 years as a place for new and experienced users to get and give help on the AnyBody Modeling System.   The old forum had served well. Around 10.000 posts and 1800 topics were created on the old forum since 2009. But the old forum had started to feel a bit old fashioned and outdated. So it was time to upgrade our community page.   The choice for a new system fell on Discourse. Discourse is modern forum system which works well on both desktop and mobile. It has a lot of nice features:   Conversations and not pages:   Posts structured by conversations, and not spread across multiple pages where you have to click the next page constantly. Instead, new content loads automatically. Just scroll down.           Effective search:   Search now works infinitely better than before. Just type in your search terms to easily find related posts.      There is also options to search individual topics or options to refine the search to dates, categories, tags, users etc. So now it is much easier to find the relevant information without having to make a new topic.   Nice editor with preview:   The editor is really nice. It supports a live preview pane, markdown formatting, math using LaTeX, drag-drop images an much more. Even if you are not familiar with markdown syntax it is easy to use with the buttons on the toolbar.      Migration to the new forum system   We migrated all the posts from the old forum and users how had previously posted on the old forum. Passwords could not be migrated, so you will have to reset your password the first time you log in. Just click the ‘I forgot my password’ link the first time you access the new site.      If you have never used the forum system you will have to create a new user account. The same is case if you got a new email address or if you just want to start from scratch.    Give the new forum a try.   ","categories": ["News"],
        "tags": ["web site"],
        "url": "https://anyscript.org/news/New-forum-system/",
        "teaser":"https://anyscript.org/assets/images/posts/new-forum_teaser.svg"}]
